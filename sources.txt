# assert
assert(value, message)
assert.deepEqual(actual, expected, message)
assert.deepStrictEqual(actual, expected, message)
assert.doesNotThrow(block, error, message)
assert.equal(actual, expected, message)
assert.fail(message)
assert.fail(actual, expected, message, operator, stackStartFunction)
assert.ifError(value)
assert.notDeepEqual(actual, expected, message)
assert.notDeepStrictEqual(actual, expected, message)
assert.notEqual(actual, expected, message)
assert.notStrictEqual(actual, expected, message)
assert.ok(value, message)
assert.strictEqual(actual, expected, message)
assert.throws(block, error, message)
# buffer
Buffer.alloc(size, fill, encoding)
Buffer.allocUnsafe(size)
Buffer.allocUnsafeSlow(size)
Buffer.byteLength(string, encoding)
Buffer.compare(buf1, buf2)
Buffer.concat(list, totalLength)
Buffer.from(array)
Buffer.from(arrayBuffer, byteOffset, length)
Buffer.from(buffer)
Buffer.from(string, encoding)
Buffer.from(object, offsetOrEncoding, length)
Buffer.isBuffer(obj)
Buffer.isEncoding(encoding)
Buffer.poolSize
bufindex
buf.buffer
buf.compare(target, targetStart, targetEnd, sourceStart, sourceEnd)
buf.copy(target, targetStart, sourceStart, sourceEnd)
buf.entries()
buf.equals(otherBuffer)
buf.fill(value, offset, end, encoding)
buf.includes(value, byteOffset, encoding)
buf.indexOf(value, byteOffset, encoding)
buf.keys()
buf.lastIndexOf(value, byteOffset, encoding)
buf.length
buf.parent
buf.readDoubleBE(offset, noAssert)
buf.readDoubleLE(offset, noAssert)
buf.readFloatBE(offset, noAssert)
buf.readFloatLE(offset, noAssert)
buf.readInt8(offset, noAssert)
buf.readInt16BE(offset, noAssert)
buf.readInt16LE(offset, noAssert)
buf.readInt32BE(offset, noAssert)
buf.readInt32LE(offset, noAssert)
buf.readIntBE(offset, byteLength, noAssert)
buf.readIntLE(offset, byteLength, noAssert)
buf.readUInt8(offset, noAssert)
buf.readUInt16BE(offset, noAssert)
buf.readUInt16LE(offset, noAssert)
buf.readUInt32BE(offset, noAssert)
buf.readUInt32LE(offset, noAssert)
buf.readUIntBE(offset, byteLength, noAssert)
buf.readUIntLE(offset, byteLength, noAssert)
buf.slice(start, end)
buf.swap16()
buf.swap32()
buf.swap64()
buf.toJSON()
buf.toString(encoding, start, end)
buf.values()
buf.write(string, offset, length, encoding)
buf.writeDoubleBE(value, offset, noAssert)
buf.writeDoubleLE(value, offset, noAssert)
buf.writeFloatBE(value, offset, noAssert)
buf.writeFloatLE(value, offset, noAssert)
buf.writeInt8(value, offset, noAssert)
buf.writeInt16BE(value, offset, noAssert)
buf.writeInt16LE(value, offset, noAssert)
buf.writeInt32BE(value, offset, noAssert)
buf.writeInt32LE(value, offset, noAssert)
buf.writeIntBE(value, offset, byteLength, noAssert)
buf.writeIntLE(value, offset, byteLength, noAssert)
buf.writeUInt8(value, offset, noAssert)
buf.writeUInt16BE(value, offset, noAssert)
buf.writeUInt16LE(value, offset, noAssert)
buf.writeUInt32BE(value, offset, noAssert)
buf.writeUInt32LE(value, offset, noAssert)
buf.writeUIntBE(value, offset, byteLength, noAssert)
buf.writeUIntLE(value, offset, byteLength, noAssert)
buffer.kMaxLength
buffer.transcode(source, fromEnc, toEnc)
SlowBuffer(size)
buffer.INSPECT_MAX_BYTES
buffer.constants.MAX_LENGTH
buffer.constants.MAX_STRING_LENGTH
# child_process
child_process.exec(command, options, callback)
child_process.execFile(file, args, options, callback)
child_process.fork(modulePath, args, options)
child_process.spawn(command, args, options)
child_process.execFileSync(file, args, options)
child_process.execSync(command, options)
child_process.spawnSync(command, args, options)
subprocess.channel
subprocess.connected
subprocess.disconnect()
subprocess.kill(signal)
subprocess.killed
subprocess.pid
subprocess.send(message, sendHandle, options, callback)
subprocess.stderr
subprocess.stdin
subprocess.stdio
subprocess.stdout
# cluster
cluster.disconnect(callback)
cluster.fork(env)
cluster.isMaster
cluster.isWorker
cluster.schedulingPolicy
cluster.settings
cluster.setupMaster(settings)
cluster.worker
cluster.workers
worker.disconnect()
worker.exitedAfterDisconnect
worker.id
worker.isConnected()
worker.isDead()
worker.kill(signal='SIGTERM')
worker.process
worker.send(message, sendHandle, callback)
# console
Console(stdout, stderr)
console.assert(value, message, ...args)
console.clear()
console.count(label)
console.countReset(label = 'default')
console.dir(obj, options)
console.error(data, ...args)
console.group(...label)
console.groupCollapsed()
console.groupEnd()
console.info(data, ...args)
console.log(data, ...args)
console.time(label)
console.timeEnd(label)
console.trace(message, ...args)
console.warn(data, ...args)
# crypto
Certificate
crypto.Certificate()
certificate.exportChallenge(spkac)
certificate.exportPublicKey(spkac)
certificate.verifySpkac(spkac)
Cipher
cipher.final(outputEncoding)
cipher.setAAD(buffer)
cipher.getAuthTag()
cipher.setAutoPadding(autoPadding)
cipher.update(data, inputEncoding, outputEncoding)
Decipher
decipher.final(outputEncoding)
decipher.setAAD(buffer)
decipher.setAuthTag(buffer)
decipher.setAutoPadding(autoPadding)
decipher.update(data, inputEncoding, outputEncoding)
DiffieHellman
diffieHellman.computeSecret(otherPublicKey, inputEncoding, outputEncoding)
diffieHellman.generateKeys(encoding)
diffieHellman.getGenerator(encoding)
diffieHellman.getPrime(encoding)
diffieHellman.getPrivateKey(encoding)
diffieHellman.getPublicKey(encoding)
diffieHellman.setPrivateKey(privateKey, encoding)
diffieHellman.setPublicKey(publicKey, encoding)
diffieHellman.verifyError
ECDH
ecdh.computeSecret(otherPublicKey, inputEncoding, outputEncoding)
ecdh.generateKeys(encoding, format)
ecdh.getPrivateKey(encoding)
ecdh.getPublicKey(encoding, format)
ecdh.setPrivateKey(privateKey, encoding)
Hash
hash.digest(encoding)
hash.update(data, inputEncoding)
Hmac
hmac.digest(encoding)
hmac.update(data, inputEncoding)
Sign
sign.sign(privateKey, outputFormat)
sign.update(data, inputEncoding)
Verify
verify.update(data, inputEncoding)
verify.verify(object, signature, signatureFormat)
crypto.constants
crypto.DEFAULT_ENCODING
crypto.fips
crypto.createCipher(algorithm, password, options)
crypto.createCipheriv(algorithm, key, iv, options)
crypto.createDecipher(algorithm, password, options)
crypto.createDecipheriv(algorithm, key, iv, options)
crypto.createDiffieHellman(prime, primeEncoding, generator, generatorEncoding)
crypto.createDiffieHellman(primeLength, generator)
crypto.createECDH(curveName)
crypto.createHash(algorithm, options)
crypto.createHmac(algorithm, key, options)
crypto.createSign(algorithm, options)
crypto.createVerify(algorithm, options)
crypto.getCiphers()
crypto.getCurves()
crypto.getDiffieHellman(groupName)
crypto.getHashes()
crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)
crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)
crypto.privateDecrypt(privateKey, buffer)
crypto.privateEncrypt(privateKey, buffer)
crypto.publicDecrypt(publicKey, buffer)
crypto.publicEncrypt(publicKey, buffer)
crypto.randomBytes(size, callback)
crypto.randomFillSync(buffer, offset, size)
crypto.randomFill(buffer, offset, size, callback)
crypto.setEngine(engine, flags)
crypto.timingSafeEqual(a, b)
# decoder
decoder.write(buffer)
decoder.end()
# domain
domain.create()
domain.run(fn)
domain.members
domain.add(emitter)
domain.remove(emitter)
domain.bind(callback)
domain.intercept(callback)
domain.enter()
domain.exit()
domain.dispose()
# dns
dns.Resolver
resolver.cancel()
dns.getServers()
dns.lookup(hostname, options, callback)
dns.lookupService(address, port, callback)
dns.resolve(hostname, rrtype, callback)
dns.resolve4(hostname, options, callback)
dns.resolve6(hostname, options, callback)
dns.resolveCname(hostname, callback)
dns.resolveMx(hostname, callback)
dns.resolveNaptr(hostname, callback)
dns.resolveNs(hostname, callback)
dns.resolvePtr(hostname, callback)
dns.resolveSoa(hostname, callback)
dns.resolveSrv(hostname, callback)
dns.resolveTxt(hostname, callback)
dns.resolveAny(hostname, callback)
dns.reverse(ip, callback)
dns.setServers(servers)
# domain
domain.create()
Domain
domain.members
domain.add(emitter)
domain.bind(callback)
domain.dispose()
domain.enter()
domain.exit()
domain.intercept(callback)
domain.remove(emitter)
domain.run(fn, ...args)
# error
Error(message)
Error.captureStackTrace(targetObject, constructorOpt)
Error.stackTraceLimit
error.code
error.message
error.stack
error.code
error.errno
error.syscall
error.path
error.address
error.port
ERR_ARG_NOT_ITERABLE
ERR_FALSY_VALUE_REJECTION
ERR_HTTP_HEADERS_SENT
ERR_HTTP_INVALID_STATUS_CODE
ERR_HTTP_TRAILER_INVALID
ERR_HTTP2_CONNECT_AUTHORITY
ERR_HTTP2_CONNECT_PATH
ERR_HTTP2_CONNECT_SCHEME
ERR_HTTP2_ERROR
ERR_HTTP2_FRAME_ERROR
ERR_HTTP2_HEADERS_OBJECT
ERR_HTTP2_HEADERS_SENT
ERR_HTTP2_HEADER_SINGLE_VALUE
ERR_HTTP2_INFO_HEADERS_AFTER_RESPOND
ERR_HTTP2_INFO_STATUS_NOT_ALLOWED
ERR_HTTP2_INVALID_CONNECTION_HEADERS
ERR_HTTP2_INVALID_HEADER_VALUE
ERR_HTTP2_INVALID_INFO_STATUS
ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH
ERR_HTTP2_INVALID_PSEUDOHEADER
ERR_HTTP2_INVALID_SESSION
ERR_HTTP2_INVALID_SETTING_VALUE
ERR_HTTP2_INVALID_STREAM
ERR_HTTP2_MAX_PENDING_SETTINGS_ACK
ERR_HTTP2_OUT_OF_STREAMS
ERR_HTTP2_PAYLOAD_FORBIDDEN
ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED
ERR_HTTP2_PUSH_DISABLED
ERR_HTTP2_SEND_FILE
ERR_HTTP2_SOCKET_BOUND
ERR_HTTP2_STATUS_101
ERR_HTTP2_STATUS_INVALID
ERR_HTTP2_STREAM_CLOSED
ERR_HTTP2_STREAM_ERROR
ERR_HTTP2_STREAM_SELF_DEPENDENCY
ERR_HTTP2_UNSUPPORTED_PROTOCOL
ERR_INDEX_OUT_OF_RANGE
ERR_INVALID_ARG_TYPE
ERR_INVALID_CALLBACK
ERR_INVALID_FILE_URL_HOST
ERR_INVALID_FILE_URL_PATH
ERR_INVALID_HANDLE_TYPE
ERR_INVALID_OPT_VALUE
ERR_INVALID_PROTOCOL
ERR_INVALID_SYNC_FORK_INPUT
ERR_INVALID_THIS
ERR_INVALID_TUPLE
ERR_INVALID_URL
ERR_INVALID_URL_SCHEME
ERR_IPC_CHANNEL_CLOSED
ERR_IPC_DISCONNECTED
ERR_IPC_ONE_PIPE
ERR_IPC_SYNC_FORK
ERR_MISSING_ARGS
ERR_NO_ICU
ERR_SOCKET_ALREADY_BOUND
ERR_SOCKET_BAD_PORT
ERR_SOCKET_BAD_TYPE
ERR_SOCKET_CANNOT_SEND
ERR_SOCKET_DGRAM_NOT_RUNNING
ERR_STDERR_CLOSE
ERR_STDOUT_CLOSE
ERR_UNKNOWN_BUILTIN_MODULE
ERR_UNKNOWN_SIGNAL
ERR_UNKNOWN_STDIN_TYPE
ERR_UNKNOWN_STREAM_TYPE
ERR_V8BREAKITERATOR
ERR_VALID_PERFORMANCE_ENTRY_TYPE
ERR_VALUE_OUT_OF_RANGE
# event
EventEmitter
EventEmitter.listenerCount(emitter, eventName)
EventEmitter.defaultMaxListeners
emitter.addListener(eventName, listener)
emitter.emit(eventName, ...args)
emitter.eventNames()
emitter.getMaxListeners()
emitter.listenerCount(eventName)
emitter.listeners(eventName)
emitter.on(eventName, listener)
emitter.once(eventName, listener)
emitter.prependListener(eventName, listener)
emitter.prependOnceListener(eventName, listener)
emitter.removeAllListeners(eventName)
emitter.removeListener(eventName, listener)
emitter.setMaxListeners(n)
# fs
fs.FSWatcher
watcher.close()
fs.ReadStream
readStream.bytesRead
readStream.path
fs.Stats
fs.WriteStream
writeStream.bytesWritten
writeStream.path
fs.access(path, mode, callback)
fs.accessSync(path, mode)
fs.appendFile(file, data, options, callback)
fs.appendFileSync(file, data, options)
fs.chmod(path, mode, callback)
fs.chmodSync(path, mode)
fs.chown(path, uid, gid, callback)
fs.chownSync(path, uid, gid)
fs.close(fd, callback)
fs.closeSync(fd)
fs.constants
fs.copyFile(src, dest, flags, callback)
fs.copyFileSync(src, dest, flags)
fs.createReadStream(path, options)
fs.createWriteStream(path, options)
fs.exists(path, callback)
fs.fchmod(fd, mode, callback)
fs.fchmodSync(fd, mode)
fs.fchown(fd, uid, gid, callback)
fs.fchownSync(fd, uid, gid)
fs.fdatasync(fd, callback)
fs.fdatasyncSync(fd)
fs.fstat(fd, callback)
fs.fstatSync(fd)
fs.fsync(fd, callback)
fs.fsyncSync(fd)
fs.ftruncate(fd, len, callback)
fs.ftruncateSync(fd, len)
fs.futimes(fd, atime, mtime, callback)
fs.futimesSync(fd, atime, mtime)
fs.lchmod(path, mode, callback)
fs.lchmodSync(path, mode)
fs.lchown(path, uid, gid, callback)
fs.lchownSync(path, uid, gid)
fs.link(existingPath, newPath, callback)
fs.linkSync(existingPath, newPath)
fs.lstat(path, callback)
fs.lstatSync(path)
fs.mkdir(path, mode, callback)
fs.mkdirSync(path, mode)
fs.mkdtemp(prefix, options, callback)
fs.mkdtempSync(prefix, options)
fs.open(path, flags, mode, callback)
fs.openSync(path, flags, mode)
fs.read(fd, buffer, offset, length, position, callback)
fs.readdir(path, options, callback)
fs.readdirSync(path, options)
fs.readFile(path, options, callback)
fs.readFileSync(path, options)
fs.readlink(path, options, callback)
fs.readlinkSync(path, options)
fs.readSync(fd, buffer, offset, length, position)
fs.realpath(path, options, callback)
fs.realpathSync(path, options)
fs.rename(oldPath, newPath, callback)
fs.renameSync(oldPath, newPath)
fs.rmdir(path, callback)
fs.rmdirSync(path)
fs.stat(path, callback)
fs.statSync(path)
fs.symlink(target, path, type, callback)
fs.symlinkSync(target, path, type)
fs.truncate(path, len, callback)
fs.truncateSync(path, len)
fs.unlink(path, callback)
fs.unlinkSync(path)
fs.unwatchFile(filename, listener)
fs.utimes(path, atime, mtime, callback)
fs.utimesSync(path, atime, mtime)
fs.watch(filename, options, listener)
# globals
Buffer
__dirname
__filename
clearImmediate(immediateObject)
clearInterval(intervalObject)
clearTimeout(timeoutObject)
console
exports
global
module
process
require()
setImmediate(callback, ...args)
setInterval(callback, delay, ...args)
setTimeout(callback, delay, ...args)
# http
http.Agent
Agent(options)
agent.createConnection(options, callback)
agent.keepSocketAlive(socket)
agent.reuseSocket(socket, request)
agent.destroy()
agent.freeSockets
agent.getName(options)
agent.maxFreeSockets
agent.maxSockets
agent.requests
agent.sockets
http.ClientRequest
request.abort()
request.aborted
request.connection
request.end(data, encoding, callback)
request.flushHeaders()
request.getHeader(name)
request.removeHeader(name)
request.setHeader(name, value)
request.setNoDelay(noDelay)
request.setSocketKeepAlive(enable, initialDelay)
request.setTimeout(timeout, callback)
request.socket
request.write(chunk, encoding, callback)
http.Server
server.close(callback)
server.listen(handle, callback)
server.listen(path, callback)
server.listen(port, hostname, backlog, callback)
server.listening
server.maxHeadersCount
server.setTimeout(msecs, callback)
server.timeout
server.keepAliveTimeout
http.ServerResponse
response.addTrailers(headers)
response.connection
response.end(data, encoding, callback)
response.finished
response.getHeader(name)
response.getHeaderNames()
response.getHeaders()
response.hasHeader(name)
response.headersSent
response.removeHeader(name)
response.sendDate
response.setHeader(name, value)
response.setTimeout(msecs, callback)
response.socket
response.statusCode
response.statusMessage
response.write(chunk, encoding, callback)
response.writeContinue()
response.writeHead(statusCode, statusMessage, headers)
http.IncomingMessage
message.destroy(error)
message.headers
message.httpVersion
message.method
message.rawHeaders
message.rawTrailers
message.setTimeout(msecs, callback)
message.socket
message.statusCode
message.statusMessage
message.trailers
message.url
http.METHODS
http.STATUS_CODES
http.createServer(requestListener)
http.get(options, callback)
http.globalAgent
http.request(options, callback)
# http2
Http2Session
http2session.destroy()
http2session.destroyed
http2session.localSettings
http2session.pendingSettingsAck
http2session.remoteSettings
http2session.request(headers, options)
http2session.rstStream(stream, code)
http2session.setTimeout(msecs, callback)
http2session.shutdown(options, callback)
http2session.socket
http2session.state
http2session.priority(stream, options)
http2session.settings(settings)
http2session.type
Http2Stream
http2stream.aborted
http2stream.destroyed
http2stream.priority(options)
http2stream.rstCode
http2stream.rstStream(code)
http2stream.rstWithNoError()
http2stream.rstWithProtocolError()
http2stream.rstWithCancel()
http2stream.rstWithRefuse()
http2stream.rstWithInternalError()
http2stream.session
http2stream.setTimeout(msecs, callback)
http2stream.state
ClientHttp2Stream
ServerHttp2Stream
http2stream.additionalHeaders(headers)
http2stream.headersSent
http2stream.pushAllowed
http2stream.pushStream(headers, options, callback)
http2stream.respond(headers, options)
http2stream.respondWithFD(fd, headers, options)
http2stream.respondWithFile(path, headers, options)
Http2Server
http2.createServer(options, onRequestHandler)
http2.createSecureServer(options, onRequestHandler)
http2.connect(authority, options, listener)
http2.constants
http2.getDefaultSettings()
http2.getPackedSettings(settings)
http2.getUnpackedSettings(buf)
http2.Http2ServerRequest
request.destroy(error)
request.headers
request.httpVersion
request.method
request.rawHeaders
request.rawTrailers
request.setTimeout(msecs, callback)
request.socket
request.stream
request.trailers
request.url
http2.Http2ServerResponse
response.addTrailers(headers)
response.connection
response.end(data, encoding, callback)
response.finished
response.getHeader(name)
response.getHeaderNames()
response.getHeaders()
response.hasHeader(name)
response.headersSent
response.removeHeader(name)
response.sendDate
response.setHeader(name, value)
response.setTimeout(msecs, callback)
response.socket
response.statusCode
response.statusMessage
response.stream
response.write(chunk, encoding, callback)
response.writeContinue()
response.writeHead(statusCode, statusMessage, headers)
response.createPushResponse(headers, callback)
# https
https.Agent
https.Server
server.setTimeout(msecs, callback)
server.timeout
server.keepAliveTimeout
https.createServer(options, requestListener)
server.close(callback)
server.listen(handle, callback)
server.listen(path, callback)
server.listen(port, host, backlog, callback)
https.get(options, callback)
https.globalAgent
https.request(options, callback)
# inspector
inspector.open(port, host, wait)
inspector.close()
inspector.url()
inspector.Session()
session.connect()
session.post(method, params, callback)
session.disconnect()
# module
require.cache
require.resolve()
module.children
module.exports
module.filename
module.id
module.loaded
module.parent
module.paths
module.require(id)
# net
net.Server(options, connectionListener)
server.address()
server.close(callback)
server.getConnections(callback)
server.listen()
server.listen(handle, backlog, callback)
server.listen(options, callback)
server.listen(path, backlog, callback)
server.listen(port, host, backlog, callback)
server.listening
server.maxConnections
server.ref()
server.unref()
net.Socket(options)
socket.address()
socket.bufferSize
socket.bytesRead
socket.bytesWritten
socket.connect()
socket.connect(options, connectListener)
socket.connect(path, connectListener)
socket.connect(port, host, connectListener)
socket.connecting
socket.destroy(exception)
socket.destroyed
socket.end(data, encoding)
socket.localAddress
socket.localPort
socket.pause()
socket.ref()
socket.remoteAddress
socket.remoteFamily
socket.remotePort
socket.resume()
socket.setEncoding(encoding)
socket.setKeepAlive(enable, initialDelay)
socket.setNoDelay(noDelay)
socket.setTimeout(timeout, callback)
socket.unref()
socket.write(data, encoding, callback)
net.connect(options, connectListener)
net.connect(path, connectListener)
net.connect(port, host, connectListener)
net.createConnection(options, connectListener)
net.createConnection(path, connectListener)
net.createConnection(port, host, connectListener)
net.createServer(options, connectionListener)
net.isIP(input)
net.isIPv4(input)
net.isIPv6(input)
# os
os.EOL
os.arch()
os.constants
os.cpus()
os.endianness()
os.freemem()
os.homedir()
os.hostname()
os.loadavg()
os.networkInterfaces()
os.platform()
os.release()
os.tmpdir()
os.totalmem()
os.type()
os.uptime()
os.userInfo(options)
# path
path.basename(path, ext)
path.delimiter
path.dirname(path)
path.extname(path)
path.format(pathObject)
path.isAbsolute(path)
path.join(...paths)
path.normalize(path)
path.parse(path)
path.posix
path.relative(from, to)
path.resolve(...paths)
path.sep
path.win32
# performance
Performance
performance.clearFunctions(name)
performance.clearMarks(name)
performance.clearMeasures(name)
performance.getEntries()
performance.getEntriesByName(name, type)
performance.getEntriesByType(type)
performance.mark(name)
performance.measure(name, startMark, endMark)
performance.nodeFrame
performance.nodeTiming
performance.now()
performance.timeOrigin
performance.timerify(fn)
PerformanceEntry
performanceEntry.duration
performanceEntry.name
performanceEntry.startTime
performanceEntry.entryType
performanceEntry.kind
PerformanceNodeFrame extends PerformanceEntry
performanceNodeFrame.frameCheck
performanceNodeFrame.frameCount
performanceNodeFrame.frameIdle
performanceNodeFrame.framesPerSecond
performanceNodeFrame.framePrepare
PerformanceNodeTiming extends PerformanceEntry
performanceNodeTiming.bootstrapComplete
performanceNodeTiming.clusterSetupEnd
performanceNodeTiming.clusterSetupStart
performanceNodeTiming.loopExit
performanceNodeTiming.loopStart
performanceNodeTiming.moduleLoadEnd
performanceNodeTiming.moduleLoadStart
performanceNodeTiming.nodeStart
performanceNodeTiming.preloadModuleLoadEnd
performanceNodeTiming.preloadModuleLoadStart
performanceNodeTiming.thirdPartyMainEnd
performanceNodeTiming.thirdPartyMainStart
performanceNodeTiming.v8Start
PerformanceObserver(callback)
performanceObserverEntryList.getEntries()
performanceObserverEntryList.getEntriesByName(name, type)
performanceObserverEntryList.getEntriesByType(type)
performanceObserver.disconnect()
performanceObserver.observe(options)
# process
process.abort()
process.arch
process.argv
process.argv0
process.channel
process.chdir(directory)
process.config
process.connected
process.cpuUsage(previousValue)
process.cwd()
process.disconnect()
process.emitWarning(warning, options)
process.emitWarning(warning, type, code, ctor)
process.env
process.execArgv
process.execPath
process.exit(code)
process.exitCode
process.getegid()
process.geteuid()
process.getgid()
process.getgroups()
process.getuid()
process.hrtime(time)
process.initgroups(user, extra_group)
process.kill(pid, signal)
process.mainModule
process.memoryUsage()
process.nextTick(callback, ...args)
process.pid
process.platform
process.release
process.send(message, sendHandle, options, callback)
process.setegid(id)
process.seteuid(id)
process.setgid(id)
process.setgroups(groups)
process.setuid(id)
process.stderr
process.stdin
process.stdout
process.title
process.umask(mask)
process.uptime()
process.version
process.versions
# punnycode
punycode.decode(string)
punycode.encode(string)
punycode.toASCII(domain)
punycode.toUnicode(domain)
punycode.ucs2
punycode.ucs2.decode(string)
punycode.ucs2.encode(codePoints)
punycode.version
# querystring
querystring.escape(str)
querystring.parse(str, sep, eq, options)
querystring.stringify(obj, sep, eq, options)
querystring.unescape(str)
# readline
rl.close()
rl.pause()
rl.prompt(preserveCursor)
rl.question(query, callback)
rl.resume()
rl.setPrompt(prompt)
rl.write(data, key)
readline.clearLine(stream, dir)
readline.clearScreenDown(stream)
readline.createInterface(options)
readline.cursorTo(stream, x, y)
readline.emitKeypressEvents(stream, interface)
readline.moveCursor(stream, dx, dy)
# repl
replServer.defineCommand(keyword, cmd)
replServer.displayPrompt(preserveCursor)
repl
repl.start(options)
# stream
stream.Writable(options)
writable._write(chunk, encoding, callback)
writable._writev(chunks, callback)
writable._destroy(err, callback)
writable._final(callback)
writable.cork()
writable.end(chunk, encoding, callback)
writable.setDefaultEncoding(encoding)
writable.uncork()
writable.write(chunk, encoding, callback)
writable.destroy(error)
stream.Readable(options)
readable._read(size)
readable._destroy(err, callback)
readable.push(chunk, encoding)
readable.isPaused()
readable.pause()
readable.pipe(destination, options)
readable.read(size)
readable.resume()
readable.setEncoding(encoding)
readable.unpipe(destination)
readable.unshift(chunk)
readable.wrap(stream)
readable.destroy(error)
stream.Duplex(options)
stream.Transform(options)
transform.destroy(error)
transform._flush(callback)
transform._transform(chunk, encoding, callback)
stream.PassThrough
# string decoder
StringDecoder(encoding)
stringDecoder.end(buffer)
stringDecoder.write(buffer)
# timers
timeout.ref()
timeout.unref()
setImmediate(callback, ...args)
setInterval(callback, delay, ...args)
setTimeout(callback, delay, ...args)
clearImmediate(immediate)
clearInterval(timeout)
clearTimeout(timeout)
# tls ssl
tls.Server
server.addContext(hostname, context)
server.address()
server.close(callback)
server.getTicketKeys()
server.listen(port, hostname, callback)
server.setTicketKeys(keys)
tls.TLSSocket
tls.TLSSocket(socket, options)
tlsSocket.address()
tlsSocket.authorizationError
tlsSocket.authorized
tlsSocket.disableRenegotiation()
tlsSocket.encrypted
tlsSocket.getCipher()
tlsSocket.getEphemeralKeyInfo()
tlsSocket.getPeerCertificate(detailed)
tlsSocket.getProtocol()
tlsSocket.getSession()
tlsSocket.getTLSTicket()
tlsSocket.localAddress
tlsSocket.localPort
tlsSocket.remoteAddress
tlsSocket.remoteFamily
tlsSocket.remotePort
tlsSocket.renegotiate(options, callback)
tlsSocket.setMaxSendFragment(size)
tls.connect(options, callback)
tls.connect(path, options, callback)
tls.connect(port, host, options, callback)
tls.createSecureContext(options)
tls.createServer(options, secureConnectionListener)
tls.getCiphers()
tls.DEFAULT_ECDH_CURVE
# tty
tty.ReadStream
readStream.isRaw
readStream.setRawMode(mode)
tty.WriteStream
writeStream.columns
writeStream.rows
tty.isatty(fd)
# udp/datagram
dgram
dgram.Socket
dgram.createSocket(type)
socket.addMembership(multicastAddress, multicastInterface)
socket.address()
socket.bind(port, address, callback)
socket.bind(options, callback)
socket.close(callback)
socket.dropMembership(multicastAddress, multicastInterface)
socket.ref()
socket.send(msg, offset, length, port , address , callback)
socket.setBroadcast(flag)
socket.setMulticastInterface(multicastInterface)
socket.setMulticastLoopback(flag)
socket.setMulticastTTL(ttl)
socket.setTTL(ttl)
socket.unref()
# url
URL(input, base)
url.hash
url.host
url.hostname
url.href
url.origin
url.password
url.pathname
url.port
url.protocol
url.search
url.searchParams
url.username
url.toString()
url.toJSON()
URLSearchParams()
URLSearchParams(string)
URLSearchParams(obj)
URLSearchParams(iterable)
urlSearchParams.append(name, value)
urlSearchParams.delete(name)
urlSearchParams.entries()
urlSearchParams.forEach(fn, thisArg)
urlSearchParams.get(name)
urlSearchParams.getAll(name)
urlSearchParams.has(name)
urlSearchParams.keys()
urlSearchParams.set(name, value)
urlSearchParams.sort()
urlSearchParams.toString()
urlSearchParams.values()
urlSearchParams@@iterator()
url.domainToASCII(domain)
url.domainToUnicode(domain)
url.format(URL, options)
urlObject
urlObject.auth
urlObject.hash
urlObject.host
urlObject.hostname
urlObject.href
urlObject.path
urlObject.pathname
urlObject.port
urlObject.protocol
urlObject.query
urlObject.search
urlObject.slashes
url.format(urlObject)
url.parse(urlString, parseQueryString, slashesDenoteHost)
url.resolve(from, to)
# util
util.callbackify(original)
util.debuglog(section)
util.deprecate(function, string)
util.format(format, ...args)
util.inherits(constructor, superConstructor)
util.inspect(object, options)
util.inspect.custom
util.inspect.defaultOptions
util.promisify(original)
util.promisify.custom
util.TextDecoder
TextDecoder(encoding, options)
textDecoder.decode(input, options)
textDecoder.encoding
textDecoder.fatal
textDecoder.ignoreBOM
util.TextEncoder
textEncoder.encode(input)
textDecoder.encoding
# v8
v8.cachedDataVersionTag()
v8.getHeapSpaceStatistics()
v8.getHeapStatistics()
v8.setFlagsFromString(string)
v8.serialize(value)
v8.deserialize(buffer)
v8.Serializer
Serializer()
serializer.writeHeader()
serializer.writeValue(value)
serializer.releaseBuffer()
serializer.transferArrayBuffer(id, arrayBuffer)
serializer.writeUint32(value)
serializer.writeUint64(hi, lo)
serializer.writeDouble(value)
serializer.writeRawBytes(buffer)
serializer._writeHostObject(object)
serializer._getDataCloneError(message)
serializer._getSharedArrayBufferId(sharedArrayBuffer)
serializer._setTreatArrayBufferViewsAsHostObjects(flag)
v8.Deserializer
Deserializer(buffer)
deserializer.readHeader()
deserializer.readValue()
deserializer.transferArrayBuffer(id, arrayBuffer)
deserializer.getWireFormatVersion()
deserializer.readUint32()
deserializer.readUint64()
deserializer.readDouble()
deserializer.readRawBytes(length)
deserializer._readHostObject()
v8.DefaultSerializer
v8.DefaultDeserializer
# vm
vm.Script(code, options)
script.runInContext(contextifiedSandbox, options)
script.runInNewContext(sandbox, options)
script.runInThisContext(options)
vm.createContext(sandbox)
vm.isContext(sandbox)
vm.runInContext(code, contextifiedSandbox, options)
vm.runInNewContext(code, sandbox, options)
vm.runInThisContext(code, options)
# zlib
zlib.Deflate
zlib.DeflateRaw
zlib.Gunzip
zlib.Gzip
zlib.Inflate
zlib.InflateRaw
zlib.Unzip
zlib.Zlib
zlib.bytesRead
zlib.flush(kind, callback)
zlib.params(level, strategy, callback)
zlib.reset()
zlib.constants
zlib.createDeflate(options)
zlib.createDeflateRaw(options)
zlib.createGunzip(options)
zlib.createGzip(options)
zlib.createInflate(options)
zlib.createInflateRaw(options)
zlib.createUnzip(options)
zlib.deflate(buffer, options, callback)
zlib.deflateSync(buffer, options)
zlib.deflateRaw(buffer, options, callback)
zlib.deflateRawSync(buffer, options)
zlib.gunzip(buffer, options, callback)
zlib.gunzipSync(buffer, options)
zlib.gzip(buffer, options, callback)
zlib.gzipSync(buffer, options)
zlib.inflate(buffer, options, callback)
zlib.inflateSync(buffer, options)
zlib.inflateRaw(buffer, options, callback)
zlib.inflateRawSync(buffer, options)
zlib.unzip(buffer, options, callback)
zlib.unzipSync(buffer, options)