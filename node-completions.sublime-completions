{
  "scope": "source.js",

  "completions": [
    { "trigger": "assert", "contents": "assert(${1:value}, ${2:message})${0}" },
    { "trigger": "assert.deepEqual", "contents": "assert.deepEqual(${1:actual}, ${2:expected}, ${3:message})${0}" },
    { "trigger": "assert.deepStrictEqual", "contents": "assert.deepStrictEqual(${1:actual}, ${2:expected}, ${3:message})${0}" },
    { "trigger": "assert.doesNotThrow", "contents": "assert.doesNotThrow(${1:block}, ${2:error}, ${3:message})${0}" },
    { "trigger": "assert.equal", "contents": "assert.equal(${1:actual}, ${2:expected}, ${3:message})${0}" },
    { "trigger": "assert.fail", "contents": "assert.fail(${1:message})${0}" },
    { "trigger": "assert.fail", "contents": "assert.fail(${1:actual}, ${2:expected}, ${3:message}, ${4:operator}, ${5:stackStartFunction})${0}" },
    { "trigger": "assert.ifError", "contents": "assert.ifError(${1:value})${0}" },
    { "trigger": "assert.notDeepEqual", "contents": "assert.notDeepEqual(${1:actual}, ${2:expected}, ${3:message})${0}" },
    { "trigger": "assert.notDeepStrictEqual", "contents": "assert.notDeepStrictEqual(${1:actual}, ${2:expected}, ${3:message})${0}" },
    { "trigger": "assert.notEqual", "contents": "assert.notEqual(${1:actual}, ${2:expected}, ${3:message})${0}" },
    { "trigger": "assert.notStrictEqual", "contents": "assert.notStrictEqual(${1:actual}, ${2:expected}, ${3:message})${0}" },
    { "trigger": "assert.ok", "contents": "assert.ok(${1:value}, ${2:message})${0}" },
    { "trigger": "assert.strictEqual", "contents": "assert.strictEqual(${1:actual}, ${2:expected}, ${3:message})${0}" },
    { "trigger": "assert.throws", "contents": "assert.throws(${1:block}, ${2:error}, ${3:message})${0}" },
    { "trigger": "Buffer.alloc", "contents": "Buffer.alloc(${1:size}, ${2:fill}, ${3:encoding})${0}" },
    { "trigger": "Buffer.allocUnsafe", "contents": "Buffer.allocUnsafe(${1:size})${0}" },
    { "trigger": "Buffer.allocUnsafeSlow", "contents": "Buffer.allocUnsafeSlow(${1:size})${0}" },
    { "trigger": "Buffer.byteLength", "contents": "Buffer.byteLength(${1:string}, ${2:encoding})${0}" },
    { "trigger": "Buffer.compare", "contents": "Buffer.compare(${1:buf1}, ${2:buf2})${0}" },
    { "trigger": "Buffer.concat", "contents": "Buffer.concat(${1:list}, ${2:totalLength})${0}" },
    { "trigger": "Buffer.from", "contents": "Buffer.from(${1:array})${0}" },
    { "trigger": "Buffer.from", "contents": "Buffer.from(${1:arrayBuffer}, ${2:byteOffset}, ${3:length})${0}" },
    { "trigger": "Buffer.from", "contents": "Buffer.from(${1:buffer})${0}" },
    { "trigger": "Buffer.from", "contents": "Buffer.from(${1:string}, ${2:encoding})${0}" },
    { "trigger": "Buffer.from", "contents": "Buffer.from(${1:object}, ${2:offsetOrEncoding}, ${3:length})${0}" },
    { "trigger": "Buffer.isBuffer", "contents": "Buffer.isBuffer(${1:obj})${0}" },
    { "trigger": "Buffer.isEncoding", "contents": "Buffer.isEncoding(${1:encoding})${0}" },
    { "trigger": "Buffer.poolSize", "contents": "Buffer.poolSize${0}" },
    { "trigger": "bufindex", "contents": "bufindex${0}" },
    { "trigger": "buf.buffer", "contents": "buf.buffer${0}" },
    { "trigger": "buf.compare", "contents": "buf.compare(${1:target}, ${2:targetStart}, ${3:targetEnd}, ${4:sourceStart}, ${5:sourceEnd})${0}" },
    { "trigger": "buf.copy", "contents": "buf.copy(${1:target}, ${2:targetStart}, ${3:sourceStart}, ${4:sourceEnd})${0}" },
    { "trigger": "buf.entries", "contents": "buf.entries()${0}" },
    { "trigger": "buf.equals", "contents": "buf.equals(${1:otherBuffer})${0}" },
    { "trigger": "buf.fill", "contents": "buf.fill(${1:value}, ${2:offset}, ${3:end}, ${4:encoding})${0}" },
    { "trigger": "buf.includes", "contents": "buf.includes(${1:value}, ${2:byteOffset}, ${3:encoding})${0}" },
    { "trigger": "buf.indexOf", "contents": "buf.indexOf(${1:value}, ${2:byteOffset}, ${3:encoding})${0}" },
    { "trigger": "buf.keys", "contents": "buf.keys()${0}" },
    { "trigger": "buf.lastIndexOf", "contents": "buf.lastIndexOf(${1:value}, ${2:byteOffset}, ${3:encoding})${0}" },
    { "trigger": "buf.length", "contents": "buf.length${0}" },
    { "trigger": "buf.parent", "contents": "buf.parent${0}" },
    { "trigger": "buf.readDoubleBE", "contents": "buf.readDoubleBE(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readDoubleLE", "contents": "buf.readDoubleLE(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readFloatBE", "contents": "buf.readFloatBE(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readFloatLE", "contents": "buf.readFloatLE(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readInt8", "contents": "buf.readInt8(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readInt16BE", "contents": "buf.readInt16BE(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readInt16LE", "contents": "buf.readInt16LE(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readInt32BE", "contents": "buf.readInt32BE(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readInt32LE", "contents": "buf.readInt32LE(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readIntBE", "contents": "buf.readIntBE(${1:offset}, ${2:byteLength}, ${3:noAssert})${0}" },
    { "trigger": "buf.readIntLE", "contents": "buf.readIntLE(${1:offset}, ${2:byteLength}, ${3:noAssert})${0}" },
    { "trigger": "buf.readUInt8", "contents": "buf.readUInt8(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readUInt16BE", "contents": "buf.readUInt16BE(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readUInt16LE", "contents": "buf.readUInt16LE(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readUInt32BE", "contents": "buf.readUInt32BE(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readUInt32LE", "contents": "buf.readUInt32LE(${1:offset}, ${2:noAssert})${0}" },
    { "trigger": "buf.readUIntBE", "contents": "buf.readUIntBE(${1:offset}, ${2:byteLength}, ${3:noAssert})${0}" },
    { "trigger": "buf.readUIntLE", "contents": "buf.readUIntLE(${1:offset}, ${2:byteLength}, ${3:noAssert})${0}" },
    { "trigger": "buf.slice", "contents": "buf.slice(${1:start}, ${2:end})${0}" },
    { "trigger": "buf.swap16", "contents": "buf.swap16()${0}" },
    { "trigger": "buf.swap32", "contents": "buf.swap32()${0}" },
    { "trigger": "buf.swap64", "contents": "buf.swap64()${0}" },
    { "trigger": "buf.toJSON", "contents": "buf.toJSON()${0}" },
    { "trigger": "buf.toString", "contents": "buf.toString(${1:encoding}, ${2:start}, ${3:end})${0}" },
    { "trigger": "buf.values", "contents": "buf.values()${0}" },
    { "trigger": "buf.write", "contents": "buf.write(${1:string}, ${2:offset}, ${3:length}, ${4:encoding})${0}" },
    { "trigger": "buf.writeDoubleBE", "contents": "buf.writeDoubleBE(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeDoubleLE", "contents": "buf.writeDoubleLE(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeFloatBE", "contents": "buf.writeFloatBE(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeFloatLE", "contents": "buf.writeFloatLE(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeInt8", "contents": "buf.writeInt8(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeInt16BE", "contents": "buf.writeInt16BE(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeInt16LE", "contents": "buf.writeInt16LE(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeInt32BE", "contents": "buf.writeInt32BE(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeInt32LE", "contents": "buf.writeInt32LE(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeIntBE", "contents": "buf.writeIntBE(${1:value}, ${2:offset}, ${3:byteLength}, ${4:noAssert})${0}" },
    { "trigger": "buf.writeIntLE", "contents": "buf.writeIntLE(${1:value}, ${2:offset}, ${3:byteLength}, ${4:noAssert})${0}" },
    { "trigger": "buf.writeUInt8", "contents": "buf.writeUInt8(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeUInt16BE", "contents": "buf.writeUInt16BE(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeUInt16LE", "contents": "buf.writeUInt16LE(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeUInt32BE", "contents": "buf.writeUInt32BE(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeUInt32LE", "contents": "buf.writeUInt32LE(${1:value}, ${2:offset}, ${3:noAssert})${0}" },
    { "trigger": "buf.writeUIntBE", "contents": "buf.writeUIntBE(${1:value}, ${2:offset}, ${3:byteLength}, ${4:noAssert})${0}" },
    { "trigger": "buf.writeUIntLE", "contents": "buf.writeUIntLE(${1:value}, ${2:offset}, ${3:byteLength}, ${4:noAssert})${0}" },
    { "trigger": "buffer.kMaxLength", "contents": "buffer.kMaxLength${0}" },
    { "trigger": "buffer.transcode", "contents": "buffer.transcode(${1:source}, ${2:fromEnc}, ${3:toEnc})${0}" },
    { "trigger": "SlowBuffer", "contents": "SlowBuffer(${1:size})${0}" },
    { "trigger": "buffer.INSPECT_MAX_BYTES", "contents": "buffer.INSPECT_MAX_BYTES${0}" },
    { "trigger": "buffer.constants.MAX_LENGTH", "contents": "buffer.constants.MAX_LENGTH${0}" },
    { "trigger": "buffer.constants.MAX_STRING_LENGTH", "contents": "buffer.constants.MAX_STRING_LENGTH${0}" },
    { "trigger": "child_process.exec", "contents": "child_process.exec(${1:command}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "child_process.execFile", "contents": "child_process.execFile(${1:file}, ${2:args}, ${3:options}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "child_process.fork", "contents": "child_process.fork(${1:modulePath}, ${2:args}, ${3:options})${0}" },
    { "trigger": "child_process.spawn", "contents": "child_process.spawn(${1:command}, ${2:args}, ${3:options})${0}" },
    { "trigger": "child_process.execFileSync", "contents": "child_process.execFileSync(${1:file}, ${2:args}, ${3:options})${0}" },
    { "trigger": "child_process.execSync", "contents": "child_process.execSync(${1:command}, ${2:options})${0}" },
    { "trigger": "child_process.spawnSync", "contents": "child_process.spawnSync(${1:command}, ${2:args}, ${3:options})${0}" },
    { "trigger": "subprocess.channel", "contents": "subprocess.channel${0}" },
    { "trigger": "subprocess.connected", "contents": "subprocess.connected${0}" },
    { "trigger": "subprocess.disconnect", "contents": "subprocess.disconnect()${0}" },
    { "trigger": "subprocess.kill", "contents": "subprocess.kill(${1:signal})${0}" },
    { "trigger": "subprocess.killed", "contents": "subprocess.killed${0}" },
    { "trigger": "subprocess.pid", "contents": "subprocess.pid${0}" },
    { "trigger": "subprocess.send", "contents": "subprocess.send(${1:message}, ${2:sendHandle}, ${3:options}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "subprocess.stderr", "contents": "subprocess.stderr${0}" },
    { "trigger": "subprocess.stdin", "contents": "subprocess.stdin${0}" },
    { "trigger": "subprocess.stdio", "contents": "subprocess.stdio${0}" },
    { "trigger": "subprocess.stdout", "contents": "subprocess.stdout${0}" },
    { "trigger": "cluster.disconnect", "contents": "cluster.disconnect(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "cluster.fork", "contents": "cluster.fork(${1:env})${0}" },
    { "trigger": "cluster.isMaster", "contents": "cluster.isMaster${0}" },
    { "trigger": "cluster.isWorker", "contents": "cluster.isWorker${0}" },
    { "trigger": "cluster.schedulingPolicy", "contents": "cluster.schedulingPolicy${0}" },
    { "trigger": "cluster.settings", "contents": "cluster.settings${0}" },
    { "trigger": "cluster.setupMaster", "contents": "cluster.setupMaster(${1:settings})${0}" },
    { "trigger": "cluster.worker", "contents": "cluster.worker${0}" },
    { "trigger": "cluster.workers", "contents": "cluster.workers${0}" },
    { "trigger": "worker.disconnect", "contents": "worker.disconnect()${0}" },
    { "trigger": "worker.exitedAfterDisconnect", "contents": "worker.exitedAfterDisconnect${0}" },
    { "trigger": "worker.id", "contents": "worker.id${0}" },
    { "trigger": "worker.isConnected", "contents": "worker.isConnected()${0}" },
    { "trigger": "worker.isDead", "contents": "worker.isDead()${0}" },
    { "trigger": "worker.kill", "contents": "worker.kill(${1:signal='SIGTERM'})${0}" },
    { "trigger": "worker.process", "contents": "worker.process${0}" },
    { "trigger": "worker.send", "contents": "worker.send(${1:message}, ${2:sendHandle}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "Console", "contents": "Console(${1:stdout}, ${2:stderr})${0}" },
    { "trigger": "console.assert", "contents": "console.assert(${1:value}, ${2:message}, ${3:...args})${0}" },
    { "trigger": "console.clear", "contents": "console.clear()${0}" },
    { "trigger": "console.count", "contents": "console.count(${1:label})${0}" },
    { "trigger": "console.countReset", "contents": "console.countReset(${1:label = 'default'})${0}" },
    { "trigger": "console.dir", "contents": "console.dir(${1:obj}, ${2:options})${0}" },
    { "trigger": "console.error", "contents": "console.error(${1:data}, ${2:...args})${0}" },
    { "trigger": "console.group", "contents": "console.group(${1:...label})${0}" },
    { "trigger": "console.groupCollapsed", "contents": "console.groupCollapsed()${0}" },
    { "trigger": "console.groupEnd", "contents": "console.groupEnd()${0}" },
    { "trigger": "console.info", "contents": "console.info(${1:data}, ${2:...args})${0}" },
    { "trigger": "console.log", "contents": "console.log(${1:data}, ${2:...args})${0}" },
    { "trigger": "console.time", "contents": "console.time(${1:label})${0}" },
    { "trigger": "console.timeEnd", "contents": "console.timeEnd(${1:label})${0}" },
    { "trigger": "console.trace", "contents": "console.trace(${1:message}, ${2:...args})${0}" },
    { "trigger": "console.warn", "contents": "console.warn(${1:data}, ${2:...args})${0}" },
    { "trigger": "Certificate", "contents": "Certificate${0}" },
    { "trigger": "crypto.Certificate", "contents": "crypto.Certificate()${0}" },
    { "trigger": "certificate.exportChallenge", "contents": "certificate.exportChallenge(${1:spkac})${0}" },
    { "trigger": "certificate.exportPublicKey", "contents": "certificate.exportPublicKey(${1:spkac})${0}" },
    { "trigger": "certificate.verifySpkac", "contents": "certificate.verifySpkac(${1:spkac})${0}" },
    { "trigger": "Cipher", "contents": "Cipher${0}" },
    { "trigger": "cipher.final", "contents": "cipher.final(${1:outputEncoding})${0}" },
    { "trigger": "cipher.setAAD", "contents": "cipher.setAAD(${1:buffer})${0}" },
    { "trigger": "cipher.getAuthTag", "contents": "cipher.getAuthTag()${0}" },
    { "trigger": "cipher.setAutoPadding", "contents": "cipher.setAutoPadding(${1:autoPadding})${0}" },
    { "trigger": "cipher.update", "contents": "cipher.update(${1:data}, ${2:inputEncoding}, ${3:outputEncoding})${0}" },
    { "trigger": "Decipher", "contents": "Decipher${0}" },
    { "trigger": "decipher.final", "contents": "decipher.final(${1:outputEncoding})${0}" },
    { "trigger": "decipher.setAAD", "contents": "decipher.setAAD(${1:buffer})${0}" },
    { "trigger": "decipher.setAuthTag", "contents": "decipher.setAuthTag(${1:buffer})${0}" },
    { "trigger": "decipher.setAutoPadding", "contents": "decipher.setAutoPadding(${1:autoPadding})${0}" },
    { "trigger": "decipher.update", "contents": "decipher.update(${1:data}, ${2:inputEncoding}, ${3:outputEncoding})${0}" },
    { "trigger": "DiffieHellman", "contents": "DiffieHellman${0}" },
    { "trigger": "diffieHellman.computeSecret", "contents": "diffieHellman.computeSecret(${1:otherPublicKey}, ${2:inputEncoding}, ${3:outputEncoding})${0}" },
    { "trigger": "diffieHellman.generateKeys", "contents": "diffieHellman.generateKeys(${1:encoding})${0}" },
    { "trigger": "diffieHellman.getGenerator", "contents": "diffieHellman.getGenerator(${1:encoding})${0}" },
    { "trigger": "diffieHellman.getPrime", "contents": "diffieHellman.getPrime(${1:encoding})${0}" },
    { "trigger": "diffieHellman.getPrivateKey", "contents": "diffieHellman.getPrivateKey(${1:encoding})${0}" },
    { "trigger": "diffieHellman.getPublicKey", "contents": "diffieHellman.getPublicKey(${1:encoding})${0}" },
    { "trigger": "diffieHellman.setPrivateKey", "contents": "diffieHellman.setPrivateKey(${1:privateKey}, ${2:encoding})${0}" },
    { "trigger": "diffieHellman.setPublicKey", "contents": "diffieHellman.setPublicKey(${1:publicKey}, ${2:encoding})${0}" },
    { "trigger": "diffieHellman.verifyError", "contents": "diffieHellman.verifyError${0}" },
    { "trigger": "ECDH", "contents": "ECDH${0}" },
    { "trigger": "ecdh.computeSecret", "contents": "ecdh.computeSecret(${1:otherPublicKey}, ${2:inputEncoding}, ${3:outputEncoding})${0}" },
    { "trigger": "ecdh.generateKeys", "contents": "ecdh.generateKeys(${1:encoding}, ${2:format})${0}" },
    { "trigger": "ecdh.getPrivateKey", "contents": "ecdh.getPrivateKey(${1:encoding})${0}" },
    { "trigger": "ecdh.getPublicKey", "contents": "ecdh.getPublicKey(${1:encoding}, ${2:format})${0}" },
    { "trigger": "ecdh.setPrivateKey", "contents": "ecdh.setPrivateKey(${1:privateKey}, ${2:encoding})${0}" },
    { "trigger": "Hash", "contents": "Hash${0}" },
    { "trigger": "hash.digest", "contents": "hash.digest(${1:encoding})${0}" },
    { "trigger": "hash.update", "contents": "hash.update(${1:data}, ${2:inputEncoding})${0}" },
    { "trigger": "Hmac", "contents": "Hmac${0}" },
    { "trigger": "hmac.digest", "contents": "hmac.digest(${1:encoding})${0}" },
    { "trigger": "hmac.update", "contents": "hmac.update(${1:data}, ${2:inputEncoding})${0}" },
    { "trigger": "Sign", "contents": "Sign${0}" },
    { "trigger": "sign.sign", "contents": "sign.sign(${1:privateKey}, ${2:outputFormat})${0}" },
    { "trigger": "sign.update", "contents": "sign.update(${1:data}, ${2:inputEncoding})${0}" },
    { "trigger": "Verify", "contents": "Verify${0}" },
    { "trigger": "verify.update", "contents": "verify.update(${1:data}, ${2:inputEncoding})${0}" },
    { "trigger": "verify.verify", "contents": "verify.verify(${1:object}, ${2:signature}, ${3:signatureFormat})${0}" },
    { "trigger": "crypto.constants", "contents": "crypto.constants${0}" },
    { "trigger": "crypto.DEFAULT_ENCODING", "contents": "crypto.DEFAULT_ENCODING${0}" },
    { "trigger": "crypto.fips", "contents": "crypto.fips${0}" },
    { "trigger": "crypto.createCipher", "contents": "crypto.createCipher(${1:algorithm}, ${2:password}, ${3:options})${0}" },
    { "trigger": "crypto.createCipheriv", "contents": "crypto.createCipheriv(${1:algorithm}, ${2:key}, ${3:iv}, ${4:options})${0}" },
    { "trigger": "crypto.createDecipher", "contents": "crypto.createDecipher(${1:algorithm}, ${2:password}, ${3:options})${0}" },
    { "trigger": "crypto.createDecipheriv", "contents": "crypto.createDecipheriv(${1:algorithm}, ${2:key}, ${3:iv}, ${4:options})${0}" },
    { "trigger": "crypto.createDiffieHellman", "contents": "crypto.createDiffieHellman(${1:prime}, ${2:primeEncoding}, ${3:generator}, ${4:generatorEncoding})${0}" },
    { "trigger": "crypto.createDiffieHellman", "contents": "crypto.createDiffieHellman(${1:primeLength}, ${2:generator})${0}" },
    { "trigger": "crypto.createECDH", "contents": "crypto.createECDH(${1:curveName})${0}" },
    { "trigger": "crypto.createHash", "contents": "crypto.createHash(${1:algorithm}, ${2:options})${0}" },
    { "trigger": "crypto.createHmac", "contents": "crypto.createHmac(${1:algorithm}, ${2:key}, ${3:options})${0}" },
    { "trigger": "crypto.createSign", "contents": "crypto.createSign(${1:algorithm}, ${2:options})${0}" },
    { "trigger": "crypto.createVerify", "contents": "crypto.createVerify(${1:algorithm}, ${2:options})${0}" },
    { "trigger": "crypto.getCiphers", "contents": "crypto.getCiphers()${0}" },
    { "trigger": "crypto.getCurves", "contents": "crypto.getCurves()${0}" },
    { "trigger": "crypto.getDiffieHellman", "contents": "crypto.getDiffieHellman(${1:groupName})${0}" },
    { "trigger": "crypto.getHashes", "contents": "crypto.getHashes()${0}" },
    { "trigger": "crypto.pbkdf2", "contents": "crypto.pbkdf2(${1:password}, ${2:salt}, ${3:iterations}, ${4:keylen}, ${5:digest}, function(${6:args}) {\n\t${7:// body}\n})${0}" },
    { "trigger": "crypto.pbkdf2Sync", "contents": "crypto.pbkdf2Sync(${1:password}, ${2:salt}, ${3:iterations}, ${4:keylen}, ${5:digest})${0}" },
    { "trigger": "crypto.privateDecrypt", "contents": "crypto.privateDecrypt(${1:privateKey}, ${2:buffer})${0}" },
    { "trigger": "crypto.privateEncrypt", "contents": "crypto.privateEncrypt(${1:privateKey}, ${2:buffer})${0}" },
    { "trigger": "crypto.publicDecrypt", "contents": "crypto.publicDecrypt(${1:publicKey}, ${2:buffer})${0}" },
    { "trigger": "crypto.publicEncrypt", "contents": "crypto.publicEncrypt(${1:publicKey}, ${2:buffer})${0}" },
    { "trigger": "crypto.randomBytes", "contents": "crypto.randomBytes(${1:size}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "crypto.randomFillSync", "contents": "crypto.randomFillSync(${1:buffer}, ${2:offset}, ${3:size})${0}" },
    { "trigger": "crypto.randomFill", "contents": "crypto.randomFill(${1:buffer}, ${2:offset}, ${3:size}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "crypto.setEngine", "contents": "crypto.setEngine(${1:engine}, ${2:flags})${0}" },
    { "trigger": "crypto.timingSafeEqual", "contents": "crypto.timingSafeEqual(${1:a}, ${2:b})${0}" },
    { "trigger": "decoder.write", "contents": "decoder.write(${1:buffer})${0}" },
    { "trigger": "decoder.end", "contents": "decoder.end()${0}" },
    { "trigger": "domain.create", "contents": "domain.create()${0}" },
    { "trigger": "domain.run", "contents": "domain.run(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "domain.members", "contents": "domain.members${0}" },
    { "trigger": "domain.add", "contents": "domain.add(${1:emitter})${0}" },
    { "trigger": "domain.remove", "contents": "domain.remove(${1:emitter})${0}" },
    { "trigger": "domain.bind", "contents": "domain.bind(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "domain.intercept", "contents": "domain.intercept(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "domain.enter", "contents": "domain.enter()${0}" },
    { "trigger": "domain.exit", "contents": "domain.exit()${0}" },
    { "trigger": "domain.dispose", "contents": "domain.dispose()${0}" },
    { "trigger": "dns.Resolver", "contents": "dns.Resolver${0}" },
    { "trigger": "resolver.cancel", "contents": "resolver.cancel()${0}" },
    { "trigger": "dns.getServers", "contents": "dns.getServers()${0}" },
    { "trigger": "dns.lookup", "contents": "dns.lookup(${1:hostname}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "dns.lookupService", "contents": "dns.lookupService(${1:address}, ${2:port}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "dns.resolve", "contents": "dns.resolve(${1:hostname}, ${2:rrtype}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "dns.resolve4", "contents": "dns.resolve4(${1:hostname}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "dns.resolve6", "contents": "dns.resolve6(${1:hostname}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "dns.resolveCname", "contents": "dns.resolveCname(${1:hostname}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolveMx", "contents": "dns.resolveMx(${1:hostname}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolveNaptr", "contents": "dns.resolveNaptr(${1:hostname}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolveNs", "contents": "dns.resolveNs(${1:hostname}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolvePtr", "contents": "dns.resolvePtr(${1:hostname}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolveSoa", "contents": "dns.resolveSoa(${1:hostname}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolveSrv", "contents": "dns.resolveSrv(${1:hostname}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolveTxt", "contents": "dns.resolveTxt(${1:hostname}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolveAny", "contents": "dns.resolveAny(${1:hostname}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.reverse", "contents": "dns.reverse(${1:ip}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.setServers", "contents": "dns.setServers(${1:servers})${0}" },
    { "trigger": "domain.create", "contents": "domain.create()${0}" },
    { "trigger": "Domain", "contents": "Domain${0}" },
    { "trigger": "domain.members", "contents": "domain.members${0}" },
    { "trigger": "domain.add", "contents": "domain.add(${1:emitter})${0}" },
    { "trigger": "domain.bind", "contents": "domain.bind(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "domain.dispose", "contents": "domain.dispose()${0}" },
    { "trigger": "domain.enter", "contents": "domain.enter()${0}" },
    { "trigger": "domain.exit", "contents": "domain.exit()${0}" },
    { "trigger": "domain.intercept", "contents": "domain.intercept(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "domain.remove", "contents": "domain.remove(${1:emitter})${0}" },
    { "trigger": "domain.run", "contents": "domain.run(function(${1:args}) {\n\t${2:// body}\n}, ${2:...args})${0}" },
    { "trigger": "Error", "contents": "Error(${1:message})${0}" },
    { "trigger": "Error.captureStackTrace", "contents": "Error.captureStackTrace(${1:targetObject}, ${2:constructorOpt})${0}" },
    { "trigger": "Error.stackTraceLimit", "contents": "Error.stackTraceLimit${0}" },
    { "trigger": "error.code", "contents": "error.code${0}" },
    { "trigger": "error.message", "contents": "error.message${0}" },
    { "trigger": "error.stack", "contents": "error.stack${0}" },
    { "trigger": "error.code", "contents": "error.code${0}" },
    { "trigger": "error.errno", "contents": "error.errno${0}" },
    { "trigger": "error.syscall", "contents": "error.syscall${0}" },
    { "trigger": "error.path", "contents": "error.path${0}" },
    { "trigger": "error.address", "contents": "error.address${0}" },
    { "trigger": "error.port", "contents": "error.port${0}" },
    { "trigger": "ERR_ARG_NOT_ITERABLE", "contents": "ERR_ARG_NOT_ITERABLE${0}" },
    { "trigger": "ERR_FALSY_VALUE_REJECTION", "contents": "ERR_FALSY_VALUE_REJECTION${0}" },
    { "trigger": "ERR_HTTP_HEADERS_SENT", "contents": "ERR_HTTP_HEADERS_SENT${0}" },
    { "trigger": "ERR_HTTP_INVALID_STATUS_CODE", "contents": "ERR_HTTP_INVALID_STATUS_CODE${0}" },
    { "trigger": "ERR_HTTP_TRAILER_INVALID", "contents": "ERR_HTTP_TRAILER_INVALID${0}" },
    { "trigger": "ERR_HTTP2_CONNECT_AUTHORITY", "contents": "ERR_HTTP2_CONNECT_AUTHORITY${0}" },
    { "trigger": "ERR_HTTP2_CONNECT_PATH", "contents": "ERR_HTTP2_CONNECT_PATH${0}" },
    { "trigger": "ERR_HTTP2_CONNECT_SCHEME", "contents": "ERR_HTTP2_CONNECT_SCHEME${0}" },
    { "trigger": "ERR_HTTP2_ERROR", "contents": "ERR_HTTP2_ERROR${0}" },
    { "trigger": "ERR_HTTP2_FRAME_ERROR", "contents": "ERR_HTTP2_FRAME_ERROR${0}" },
    { "trigger": "ERR_HTTP2_HEADERS_OBJECT", "contents": "ERR_HTTP2_HEADERS_OBJECT${0}" },
    { "trigger": "ERR_HTTP2_HEADERS_SENT", "contents": "ERR_HTTP2_HEADERS_SENT${0}" },
    { "trigger": "ERR_HTTP2_HEADER_SINGLE_VALUE", "contents": "ERR_HTTP2_HEADER_SINGLE_VALUE${0}" },
    { "trigger": "ERR_HTTP2_INFO_HEADERS_AFTER_RESPOND", "contents": "ERR_HTTP2_INFO_HEADERS_AFTER_RESPOND${0}" },
    { "trigger": "ERR_HTTP2_INFO_STATUS_NOT_ALLOWED", "contents": "ERR_HTTP2_INFO_STATUS_NOT_ALLOWED${0}" },
    { "trigger": "ERR_HTTP2_INVALID_CONNECTION_HEADERS", "contents": "ERR_HTTP2_INVALID_CONNECTION_HEADERS${0}" },
    { "trigger": "ERR_HTTP2_INVALID_HEADER_VALUE", "contents": "ERR_HTTP2_INVALID_HEADER_VALUE${0}" },
    { "trigger": "ERR_HTTP2_INVALID_INFO_STATUS", "contents": "ERR_HTTP2_INVALID_INFO_STATUS${0}" },
    { "trigger": "ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH", "contents": "ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH${0}" },
    { "trigger": "ERR_HTTP2_INVALID_PSEUDOHEADER", "contents": "ERR_HTTP2_INVALID_PSEUDOHEADER${0}" },
    { "trigger": "ERR_HTTP2_INVALID_SESSION", "contents": "ERR_HTTP2_INVALID_SESSION${0}" },
    { "trigger": "ERR_HTTP2_INVALID_SETTING_VALUE", "contents": "ERR_HTTP2_INVALID_SETTING_VALUE${0}" },
    { "trigger": "ERR_HTTP2_INVALID_STREAM", "contents": "ERR_HTTP2_INVALID_STREAM${0}" },
    { "trigger": "ERR_HTTP2_MAX_PENDING_SETTINGS_ACK", "contents": "ERR_HTTP2_MAX_PENDING_SETTINGS_ACK${0}" },
    { "trigger": "ERR_HTTP2_OUT_OF_STREAMS", "contents": "ERR_HTTP2_OUT_OF_STREAMS${0}" },
    { "trigger": "ERR_HTTP2_PAYLOAD_FORBIDDEN", "contents": "ERR_HTTP2_PAYLOAD_FORBIDDEN${0}" },
    { "trigger": "ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED", "contents": "ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED${0}" },
    { "trigger": "ERR_HTTP2_PUSH_DISABLED", "contents": "ERR_HTTP2_PUSH_DISABLED${0}" },
    { "trigger": "ERR_HTTP2_SEND_FILE", "contents": "ERR_HTTP2_SEND_FILE${0}" },
    { "trigger": "ERR_HTTP2_SOCKET_BOUND", "contents": "ERR_HTTP2_SOCKET_BOUND${0}" },
    { "trigger": "ERR_HTTP2_STATUS_101", "contents": "ERR_HTTP2_STATUS_101${0}" },
    { "trigger": "ERR_HTTP2_STATUS_INVALID", "contents": "ERR_HTTP2_STATUS_INVALID${0}" },
    { "trigger": "ERR_HTTP2_STREAM_CLOSED", "contents": "ERR_HTTP2_STREAM_CLOSED${0}" },
    { "trigger": "ERR_HTTP2_STREAM_ERROR", "contents": "ERR_HTTP2_STREAM_ERROR${0}" },
    { "trigger": "ERR_HTTP2_STREAM_SELF_DEPENDENCY", "contents": "ERR_HTTP2_STREAM_SELF_DEPENDENCY${0}" },
    { "trigger": "ERR_HTTP2_UNSUPPORTED_PROTOCOL", "contents": "ERR_HTTP2_UNSUPPORTED_PROTOCOL${0}" },
    { "trigger": "ERR_INDEX_OUT_OF_RANGE", "contents": "ERR_INDEX_OUT_OF_RANGE${0}" },
    { "trigger": "ERR_INVALID_ARG_TYPE", "contents": "ERR_INVALID_ARG_TYPE${0}" },
    { "trigger": "ERR_INVALID_CALLBACK", "contents": "ERR_INVALID_CALLBACK${0}" },
    { "trigger": "ERR_INVALID_FILE_URL_HOST", "contents": "ERR_INVALID_FILE_URL_HOST${0}" },
    { "trigger": "ERR_INVALID_FILE_URL_PATH", "contents": "ERR_INVALID_FILE_URL_PATH${0}" },
    { "trigger": "ERR_INVALID_HANDLE_TYPE", "contents": "ERR_INVALID_HANDLE_TYPE${0}" },
    { "trigger": "ERR_INVALID_OPT_VALUE", "contents": "ERR_INVALID_OPT_VALUE${0}" },
    { "trigger": "ERR_INVALID_PROTOCOL", "contents": "ERR_INVALID_PROTOCOL${0}" },
    { "trigger": "ERR_INVALID_SYNC_FORK_INPUT", "contents": "ERR_INVALID_SYNC_FORK_INPUT${0}" },
    { "trigger": "ERR_INVALID_THIS", "contents": "ERR_INVALID_THIS${0}" },
    { "trigger": "ERR_INVALID_TUPLE", "contents": "ERR_INVALID_TUPLE${0}" },
    { "trigger": "ERR_INVALID_URL", "contents": "ERR_INVALID_URL${0}" },
    { "trigger": "ERR_INVALID_URL_SCHEME", "contents": "ERR_INVALID_URL_SCHEME${0}" },
    { "trigger": "ERR_IPC_CHANNEL_CLOSED", "contents": "ERR_IPC_CHANNEL_CLOSED${0}" },
    { "trigger": "ERR_IPC_DISCONNECTED", "contents": "ERR_IPC_DISCONNECTED${0}" },
    { "trigger": "ERR_IPC_ONE_PIPE", "contents": "ERR_IPC_ONE_PIPE${0}" },
    { "trigger": "ERR_IPC_SYNC_FORK", "contents": "ERR_IPC_SYNC_FORK${0}" },
    { "trigger": "ERR_MISSING_ARGS", "contents": "ERR_MISSING_ARGS${0}" },
    { "trigger": "ERR_NO_ICU", "contents": "ERR_NO_ICU${0}" },
    { "trigger": "ERR_SOCKET_ALREADY_BOUND", "contents": "ERR_SOCKET_ALREADY_BOUND${0}" },
    { "trigger": "ERR_SOCKET_BAD_PORT", "contents": "ERR_SOCKET_BAD_PORT${0}" },
    { "trigger": "ERR_SOCKET_BAD_TYPE", "contents": "ERR_SOCKET_BAD_TYPE${0}" },
    { "trigger": "ERR_SOCKET_CANNOT_SEND", "contents": "ERR_SOCKET_CANNOT_SEND${0}" },
    { "trigger": "ERR_SOCKET_DGRAM_NOT_RUNNING", "contents": "ERR_SOCKET_DGRAM_NOT_RUNNING${0}" },
    { "trigger": "ERR_STDERR_CLOSE", "contents": "ERR_STDERR_CLOSE${0}" },
    { "trigger": "ERR_STDOUT_CLOSE", "contents": "ERR_STDOUT_CLOSE${0}" },
    { "trigger": "ERR_UNKNOWN_BUILTIN_MODULE", "contents": "ERR_UNKNOWN_BUILTIN_MODULE${0}" },
    { "trigger": "ERR_UNKNOWN_SIGNAL", "contents": "ERR_UNKNOWN_SIGNAL${0}" },
    { "trigger": "ERR_UNKNOWN_STDIN_TYPE", "contents": "ERR_UNKNOWN_STDIN_TYPE${0}" },
    { "trigger": "ERR_UNKNOWN_STREAM_TYPE", "contents": "ERR_UNKNOWN_STREAM_TYPE${0}" },
    { "trigger": "ERR_V8BREAKITERATOR", "contents": "ERR_V8BREAKITERATOR${0}" },
    { "trigger": "ERR_VALID_PERFORMANCE_ENTRY_TYPE", "contents": "ERR_VALID_PERFORMANCE_ENTRY_TYPE${0}" },
    { "trigger": "ERR_VALUE_OUT_OF_RANGE", "contents": "ERR_VALUE_OUT_OF_RANGE${0}" },
    { "trigger": "EventEmitter", "contents": "EventEmitter${0}" },
    { "trigger": "EventEmitter.listenerCount", "contents": "EventEmitter.listenerCount(${1:emitter}, ${2:eventName})${0}" },
    { "trigger": "EventEmitter.defaultMaxListeners", "contents": "EventEmitter.defaultMaxListeners${0}" },
    { "trigger": "emitter.addListener", "contents": "emitter.addListener(${1:eventName}, ${2:listener})${0}" },
    { "trigger": "emitter.emit", "contents": "emitter.emit(${1:eventName}, ${2:...args})${0}" },
    { "trigger": "emitter.eventNames", "contents": "emitter.eventNames()${0}" },
    { "trigger": "emitter.getMaxListeners", "contents": "emitter.getMaxListeners()${0}" },
    { "trigger": "emitter.listenerCount", "contents": "emitter.listenerCount(${1:eventName})${0}" },
    { "trigger": "emitter.listeners", "contents": "emitter.listeners(${1:eventName})${0}" },
    { "trigger": "emitter.on", "contents": "emitter.on(${1:eventName}, ${2:listener})${0}" },
    { "trigger": "emitter.once", "contents": "emitter.once(${1:eventName}, ${2:listener})${0}" },
    { "trigger": "emitter.prependListener", "contents": "emitter.prependListener(${1:eventName}, ${2:listener})${0}" },
    { "trigger": "emitter.prependOnceListener", "contents": "emitter.prependOnceListener(${1:eventName}, ${2:listener})${0}" },
    { "trigger": "emitter.removeAllListeners", "contents": "emitter.removeAllListeners(${1:eventName})${0}" },
    { "trigger": "emitter.removeListener", "contents": "emitter.removeListener(${1:eventName}, ${2:listener})${0}" },
    { "trigger": "emitter.setMaxListeners", "contents": "emitter.setMaxListeners(${1:n})${0}" },
    { "trigger": "fs.FSWatcher", "contents": "fs.FSWatcher${0}" },
    { "trigger": "watcher.close", "contents": "watcher.close()${0}" },
    { "trigger": "fs.ReadStream", "contents": "fs.ReadStream${0}" },
    { "trigger": "readStream.bytesRead", "contents": "readStream.bytesRead${0}" },
    { "trigger": "readStream.path", "contents": "readStream.path${0}" },
    { "trigger": "fs.Stats", "contents": "fs.Stats${0}" },
    { "trigger": "fs.WriteStream", "contents": "fs.WriteStream${0}" },
    { "trigger": "writeStream.bytesWritten", "contents": "writeStream.bytesWritten${0}" },
    { "trigger": "writeStream.path", "contents": "writeStream.path${0}" },
    { "trigger": "fs.access", "contents": "fs.access(${1:path}, ${2:mode}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.accessSync", "contents": "fs.accessSync(${1:path}, ${2:mode})${0}" },
    { "trigger": "fs.appendFile", "contents": "fs.appendFile(${1:file}, ${2:data}, ${3:options}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.appendFileSync", "contents": "fs.appendFileSync(${1:file}, ${2:data}, ${3:options})${0}" },
    { "trigger": "fs.chmod", "contents": "fs.chmod(${1:path}, ${2:mode}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.chmodSync", "contents": "fs.chmodSync(${1:path}, ${2:mode})${0}" },
    { "trigger": "fs.chown", "contents": "fs.chown(${1:path}, ${2:uid}, ${3:gid}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.chownSync", "contents": "fs.chownSync(${1:path}, ${2:uid}, ${3:gid})${0}" },
    { "trigger": "fs.close", "contents": "fs.close(${1:fd}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.closeSync", "contents": "fs.closeSync(${1:fd})${0}" },
    { "trigger": "fs.constants", "contents": "fs.constants${0}" },
    { "trigger": "fs.copyFile", "contents": "fs.copyFile(${1:src}, ${2:dest}, ${3:flags}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.copyFileSync", "contents": "fs.copyFileSync(${1:src}, ${2:dest}, ${3:flags})${0}" },
    { "trigger": "fs.createReadStream", "contents": "fs.createReadStream(${1:path}, ${2:options})${0}" },
    { "trigger": "fs.createWriteStream", "contents": "fs.createWriteStream(${1:path}, ${2:options})${0}" },
    { "trigger": "fs.exists", "contents": "fs.exists(${1:path}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.fchmod", "contents": "fs.fchmod(${1:fd}, ${2:mode}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.fchmodSync", "contents": "fs.fchmodSync(${1:fd}, ${2:mode})${0}" },
    { "trigger": "fs.fchown", "contents": "fs.fchown(${1:fd}, ${2:uid}, ${3:gid}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.fchownSync", "contents": "fs.fchownSync(${1:fd}, ${2:uid}, ${3:gid})${0}" },
    { "trigger": "fs.fdatasync", "contents": "fs.fdatasync(${1:fd}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.fdatasyncSync", "contents": "fs.fdatasyncSync(${1:fd})${0}" },
    { "trigger": "fs.fstat", "contents": "fs.fstat(${1:fd}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.fstatSync", "contents": "fs.fstatSync(${1:fd})${0}" },
    { "trigger": "fs.fsync", "contents": "fs.fsync(${1:fd}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.fsyncSync", "contents": "fs.fsyncSync(${1:fd})${0}" },
    { "trigger": "fs.ftruncate", "contents": "fs.ftruncate(${1:fd}, ${2:len}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.ftruncateSync", "contents": "fs.ftruncateSync(${1:fd}, ${2:len})${0}" },
    { "trigger": "fs.futimes", "contents": "fs.futimes(${1:fd}, ${2:atime}, ${3:mtime}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.futimesSync", "contents": "fs.futimesSync(${1:fd}, ${2:atime}, ${3:mtime})${0}" },
    { "trigger": "fs.lchmod", "contents": "fs.lchmod(${1:path}, ${2:mode}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.lchmodSync", "contents": "fs.lchmodSync(${1:path}, ${2:mode})${0}" },
    { "trigger": "fs.lchown", "contents": "fs.lchown(${1:path}, ${2:uid}, ${3:gid}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.lchownSync", "contents": "fs.lchownSync(${1:path}, ${2:uid}, ${3:gid})${0}" },
    { "trigger": "fs.link", "contents": "fs.link(${1:existingPath}, ${2:newPath}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.linkSync", "contents": "fs.linkSync(${1:existingPath}, ${2:newPath})${0}" },
    { "trigger": "fs.lstat", "contents": "fs.lstat(${1:path}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.lstatSync", "contents": "fs.lstatSync(${1:path})${0}" },
    { "trigger": "fs.mkdir", "contents": "fs.mkdir(${1:path}, ${2:mode}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.mkdirSync", "contents": "fs.mkdirSync(${1:path}, ${2:mode})${0}" },
    { "trigger": "fs.mkdtemp", "contents": "fs.mkdtemp(${1:prefix}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.mkdtempSync", "contents": "fs.mkdtempSync(${1:prefix}, ${2:options})${0}" },
    { "trigger": "fs.open", "contents": "fs.open(${1:path}, ${2:flags}, ${3:mode}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.openSync", "contents": "fs.openSync(${1:path}, ${2:flags}, ${3:mode})${0}" },
    { "trigger": "fs.read", "contents": "fs.read(${1:fd}, ${2:buffer}, ${3:offset}, ${4:length}, ${5:position}, function(${6:args}) {\n\t${7:// body}\n})${0}" },
    { "trigger": "fs.readdir", "contents": "fs.readdir(${1:path}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.readdirSync", "contents": "fs.readdirSync(${1:path}, ${2:options})${0}" },
    { "trigger": "fs.readFile", "contents": "fs.readFile(${1:path}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.readFileSync", "contents": "fs.readFileSync(${1:path}, ${2:options})${0}" },
    { "trigger": "fs.readlink", "contents": "fs.readlink(${1:path}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.readlinkSync", "contents": "fs.readlinkSync(${1:path}, ${2:options})${0}" },
    { "trigger": "fs.readSync", "contents": "fs.readSync(${1:fd}, ${2:buffer}, ${3:offset}, ${4:length}, ${5:position})${0}" },
    { "trigger": "fs.realpath", "contents": "fs.realpath(${1:path}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.realpathSync", "contents": "fs.realpathSync(${1:path}, ${2:options})${0}" },
    { "trigger": "fs.rename", "contents": "fs.rename(${1:oldPath}, ${2:newPath}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.renameSync", "contents": "fs.renameSync(${1:oldPath}, ${2:newPath})${0}" },
    { "trigger": "fs.rmdir", "contents": "fs.rmdir(${1:path}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.rmdirSync", "contents": "fs.rmdirSync(${1:path})${0}" },
    { "trigger": "fs.stat", "contents": "fs.stat(${1:path}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.statSync", "contents": "fs.statSync(${1:path})${0}" },
    { "trigger": "fs.symlink", "contents": "fs.symlink(${1:target}, ${2:path}, ${3:type}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.symlinkSync", "contents": "fs.symlinkSync(${1:target}, ${2:path}, ${3:type})${0}" },
    { "trigger": "fs.truncate", "contents": "fs.truncate(${1:path}, ${2:len}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.truncateSync", "contents": "fs.truncateSync(${1:path}, ${2:len})${0}" },
    { "trigger": "fs.unlink", "contents": "fs.unlink(${1:path}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.unlinkSync", "contents": "fs.unlinkSync(${1:path})${0}" },
    { "trigger": "fs.unwatchFile", "contents": "fs.unwatchFile(${1:filename}, ${2:listener})${0}" },
    { "trigger": "fs.utimes", "contents": "fs.utimes(${1:path}, ${2:atime}, ${3:mtime}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.utimesSync", "contents": "fs.utimesSync(${1:path}, ${2:atime}, ${3:mtime})${0}" },
    { "trigger": "fs.watch", "contents": "fs.watch(${1:filename}, ${2:options}, ${3:listener})${0}" },
    { "trigger": "Buffer", "contents": "Buffer${0}" },
    { "trigger": "__dirname", "contents": "__dirname${0}" },
    { "trigger": "__filename", "contents": "__filename${0}" },
    { "trigger": "clearImmediate", "contents": "clearImmediate(${1:immediateObject})${0}" },
    { "trigger": "clearInterval", "contents": "clearInterval(${1:intervalObject})${0}" },
    { "trigger": "clearTimeout", "contents": "clearTimeout(${1:timeoutObject})${0}" },
    { "trigger": "console", "contents": "console${0}" },
    { "trigger": "exports", "contents": "exports${0}" },
    { "trigger": "global", "contents": "global${0}" },
    { "trigger": "module", "contents": "module${0}" },
    { "trigger": "process", "contents": "process${0}" },
    { "trigger": "require", "contents": "require()${0}" },
    { "trigger": "setImmediate", "contents": "setImmediate(function(${1:args}) {\n\t${2:// body}\n}, ${2:...args})${0}" },
    { "trigger": "setInterval", "contents": "setInterval(function(${1:args}) {\n\t${2:// body}\n}, ${2:delay}, ${3:...args})${0}" },
    { "trigger": "setTimeout", "contents": "setTimeout(function(${1:args}) {\n\t${2:// body}\n}, ${2:delay}, ${3:...args})${0}" },
    { "trigger": "http.Agent", "contents": "http.Agent${0}" },
    { "trigger": "Agent", "contents": "Agent(${1:options})${0}" },
    { "trigger": "agent.createConnection", "contents": "agent.createConnection(${1:options}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "agent.keepSocketAlive", "contents": "agent.keepSocketAlive(${1:socket})${0}" },
    { "trigger": "agent.reuseSocket", "contents": "agent.reuseSocket(${1:socket}, ${2:request})${0}" },
    { "trigger": "agent.destroy", "contents": "agent.destroy()${0}" },
    { "trigger": "agent.freeSockets", "contents": "agent.freeSockets${0}" },
    { "trigger": "agent.getName", "contents": "agent.getName(${1:options})${0}" },
    { "trigger": "agent.maxFreeSockets", "contents": "agent.maxFreeSockets${0}" },
    { "trigger": "agent.maxSockets", "contents": "agent.maxSockets${0}" },
    { "trigger": "agent.requests", "contents": "agent.requests${0}" },
    { "trigger": "agent.sockets", "contents": "agent.sockets${0}" },
    { "trigger": "http.ClientRequest", "contents": "http.ClientRequest${0}" },
    { "trigger": "request.abort", "contents": "request.abort()${0}" },
    { "trigger": "request.aborted", "contents": "request.aborted${0}" },
    { "trigger": "request.connection", "contents": "request.connection${0}" },
    { "trigger": "request.end", "contents": "request.end(${1:data}, ${2:encoding}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "request.flushHeaders", "contents": "request.flushHeaders()${0}" },
    { "trigger": "request.getHeader", "contents": "request.getHeader(${1:name})${0}" },
    { "trigger": "request.removeHeader", "contents": "request.removeHeader(${1:name})${0}" },
    { "trigger": "request.setHeader", "contents": "request.setHeader(${1:name}, ${2:value})${0}" },
    { "trigger": "request.setNoDelay", "contents": "request.setNoDelay(${1:noDelay})${0}" },
    { "trigger": "request.setSocketKeepAlive", "contents": "request.setSocketKeepAlive(${1:enable}, ${2:initialDelay})${0}" },
    { "trigger": "request.setTimeout", "contents": "request.setTimeout(${1:timeout}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "request.socket", "contents": "request.socket${0}" },
    { "trigger": "request.write", "contents": "request.write(${1:chunk}, ${2:encoding}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "http.Server", "contents": "http.Server${0}" },
    { "trigger": "server.close", "contents": "server.close(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:handle}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:path}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:port}, ${2:hostname}, ${3:backlog}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "server.listening", "contents": "server.listening${0}" },
    { "trigger": "server.maxHeadersCount", "contents": "server.maxHeadersCount${0}" },
    { "trigger": "server.setTimeout", "contents": "server.setTimeout(${1:msecs}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "server.timeout", "contents": "server.timeout${0}" },
    { "trigger": "server.keepAliveTimeout", "contents": "server.keepAliveTimeout${0}" },
    { "trigger": "http.ServerResponse", "contents": "http.ServerResponse${0}" },
    { "trigger": "response.addTrailers", "contents": "response.addTrailers(${1:headers})${0}" },
    { "trigger": "response.connection", "contents": "response.connection${0}" },
    { "trigger": "response.end", "contents": "response.end(${1:data}, ${2:encoding}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "response.finished", "contents": "response.finished${0}" },
    { "trigger": "response.getHeader", "contents": "response.getHeader(${1:name})${0}" },
    { "trigger": "response.getHeaderNames", "contents": "response.getHeaderNames()${0}" },
    { "trigger": "response.getHeaders", "contents": "response.getHeaders()${0}" },
    { "trigger": "response.hasHeader", "contents": "response.hasHeader(${1:name})${0}" },
    { "trigger": "response.headersSent", "contents": "response.headersSent${0}" },
    { "trigger": "response.removeHeader", "contents": "response.removeHeader(${1:name})${0}" },
    { "trigger": "response.sendDate", "contents": "response.sendDate${0}" },
    { "trigger": "response.setHeader", "contents": "response.setHeader(${1:name}, ${2:value})${0}" },
    { "trigger": "response.setTimeout", "contents": "response.setTimeout(${1:msecs}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "response.socket", "contents": "response.socket${0}" },
    { "trigger": "response.statusCode", "contents": "response.statusCode${0}" },
    { "trigger": "response.statusMessage", "contents": "response.statusMessage${0}" },
    { "trigger": "response.write", "contents": "response.write(${1:chunk}, ${2:encoding}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "response.writeContinue", "contents": "response.writeContinue()${0}" },
    { "trigger": "response.writeHead", "contents": "response.writeHead(${1:statusCode}, ${2:statusMessage}, ${3:headers})${0}" },
    { "trigger": "http.IncomingMessage", "contents": "http.IncomingMessage${0}" },
    { "trigger": "message.destroy", "contents": "message.destroy(${1:error})${0}" },
    { "trigger": "message.headers", "contents": "message.headers${0}" },
    { "trigger": "message.httpVersion", "contents": "message.httpVersion${0}" },
    { "trigger": "message.method", "contents": "message.method${0}" },
    { "trigger": "message.rawHeaders", "contents": "message.rawHeaders${0}" },
    { "trigger": "message.rawTrailers", "contents": "message.rawTrailers${0}" },
    { "trigger": "message.setTimeout", "contents": "message.setTimeout(${1:msecs}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "message.socket", "contents": "message.socket${0}" },
    { "trigger": "message.statusCode", "contents": "message.statusCode${0}" },
    { "trigger": "message.statusMessage", "contents": "message.statusMessage${0}" },
    { "trigger": "message.trailers", "contents": "message.trailers${0}" },
    { "trigger": "message.url", "contents": "message.url${0}" },
    { "trigger": "http.METHODS", "contents": "http.METHODS${0}" },
    { "trigger": "http.STATUS_CODES", "contents": "http.STATUS_CODES${0}" },
    { "trigger": "http.createServer", "contents": "http.createServer(${1:requestListener})${0}" },
    { "trigger": "http.get", "contents": "http.get(${1:options}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "http.globalAgent", "contents": "http.globalAgent${0}" },
    { "trigger": "http.request", "contents": "http.request(${1:options}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "Http2Session", "contents": "Http2Session${0}" },
    { "trigger": "http2session.destroy", "contents": "http2session.destroy()${0}" },
    { "trigger": "http2session.destroyed", "contents": "http2session.destroyed${0}" },
    { "trigger": "http2session.localSettings", "contents": "http2session.localSettings${0}" },
    { "trigger": "http2session.pendingSettingsAck", "contents": "http2session.pendingSettingsAck${0}" },
    { "trigger": "http2session.remoteSettings", "contents": "http2session.remoteSettings${0}" },
    { "trigger": "http2session.request", "contents": "http2session.request(${1:headers}, ${2:options})${0}" },
    { "trigger": "http2session.rstStream", "contents": "http2session.rstStream(${1:stream}, ${2:code})${0}" },
    { "trigger": "http2session.setTimeout", "contents": "http2session.setTimeout(${1:msecs}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "http2session.shutdown", "contents": "http2session.shutdown(${1:options}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "http2session.socket", "contents": "http2session.socket${0}" },
    { "trigger": "http2session.state", "contents": "http2session.state${0}" },
    { "trigger": "http2session.priority", "contents": "http2session.priority(${1:stream}, ${2:options})${0}" },
    { "trigger": "http2session.settings", "contents": "http2session.settings(${1:settings})${0}" },
    { "trigger": "http2session.type", "contents": "http2session.type${0}" },
    { "trigger": "Http2Stream", "contents": "Http2Stream${0}" },
    { "trigger": "http2stream.aborted", "contents": "http2stream.aborted${0}" },
    { "trigger": "http2stream.destroyed", "contents": "http2stream.destroyed${0}" },
    { "trigger": "http2stream.priority", "contents": "http2stream.priority(${1:options})${0}" },
    { "trigger": "http2stream.rstCode", "contents": "http2stream.rstCode${0}" },
    { "trigger": "http2stream.rstStream", "contents": "http2stream.rstStream(${1:code})${0}" },
    { "trigger": "http2stream.rstWithNoError", "contents": "http2stream.rstWithNoError()${0}" },
    { "trigger": "http2stream.rstWithProtocolError", "contents": "http2stream.rstWithProtocolError()${0}" },
    { "trigger": "http2stream.rstWithCancel", "contents": "http2stream.rstWithCancel()${0}" },
    { "trigger": "http2stream.rstWithRefuse", "contents": "http2stream.rstWithRefuse()${0}" },
    { "trigger": "http2stream.rstWithInternalError", "contents": "http2stream.rstWithInternalError()${0}" },
    { "trigger": "http2stream.session", "contents": "http2stream.session${0}" },
    { "trigger": "http2stream.setTimeout", "contents": "http2stream.setTimeout(${1:msecs}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "http2stream.state", "contents": "http2stream.state${0}" },
    { "trigger": "ClientHttp2Stream", "contents": "ClientHttp2Stream${0}" },
    { "trigger": "ServerHttp2Stream", "contents": "ServerHttp2Stream${0}" },
    { "trigger": "http2stream.additionalHeaders", "contents": "http2stream.additionalHeaders(${1:headers})${0}" },
    { "trigger": "http2stream.headersSent", "contents": "http2stream.headersSent${0}" },
    { "trigger": "http2stream.pushAllowed", "contents": "http2stream.pushAllowed${0}" },
    { "trigger": "http2stream.pushStream", "contents": "http2stream.pushStream(${1:headers}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "http2stream.respond", "contents": "http2stream.respond(${1:headers}, ${2:options})${0}" },
    { "trigger": "http2stream.respondWithFD", "contents": "http2stream.respondWithFD(${1:fd}, ${2:headers}, ${3:options})${0}" },
    { "trigger": "http2stream.respondWithFile", "contents": "http2stream.respondWithFile(${1:path}, ${2:headers}, ${3:options})${0}" },
    { "trigger": "Http2Server", "contents": "Http2Server${0}" },
    { "trigger": "http2.createServer", "contents": "http2.createServer(${1:options}, ${2:onRequestHandler})${0}" },
    { "trigger": "http2.createSecureServer", "contents": "http2.createSecureServer(${1:options}, ${2:onRequestHandler})${0}" },
    { "trigger": "http2.connect", "contents": "http2.connect(${1:authority}, ${2:options}, ${3:listener})${0}" },
    { "trigger": "http2.constants", "contents": "http2.constants${0}" },
    { "trigger": "http2.getDefaultSettings", "contents": "http2.getDefaultSettings()${0}" },
    { "trigger": "http2.getPackedSettings", "contents": "http2.getPackedSettings(${1:settings})${0}" },
    { "trigger": "http2.getUnpackedSettings", "contents": "http2.getUnpackedSettings(${1:buf})${0}" },
    { "trigger": "http2.Http2ServerRequest", "contents": "http2.Http2ServerRequest${0}" },
    { "trigger": "request.destroy", "contents": "request.destroy(${1:error})${0}" },
    { "trigger": "request.headers", "contents": "request.headers${0}" },
    { "trigger": "request.httpVersion", "contents": "request.httpVersion${0}" },
    { "trigger": "request.method", "contents": "request.method${0}" },
    { "trigger": "request.rawHeaders", "contents": "request.rawHeaders${0}" },
    { "trigger": "request.rawTrailers", "contents": "request.rawTrailers${0}" },
    { "trigger": "request.setTimeout", "contents": "request.setTimeout(${1:msecs}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "request.socket", "contents": "request.socket${0}" },
    { "trigger": "request.stream", "contents": "request.stream${0}" },
    { "trigger": "request.trailers", "contents": "request.trailers${0}" },
    { "trigger": "request.url", "contents": "request.url${0}" },
    { "trigger": "http2.Http2ServerResponse", "contents": "http2.Http2ServerResponse${0}" },
    { "trigger": "response.addTrailers", "contents": "response.addTrailers(${1:headers})${0}" },
    { "trigger": "response.connection", "contents": "response.connection${0}" },
    { "trigger": "response.end", "contents": "response.end(${1:data}, ${2:encoding}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "response.finished", "contents": "response.finished${0}" },
    { "trigger": "response.getHeader", "contents": "response.getHeader(${1:name})${0}" },
    { "trigger": "response.getHeaderNames", "contents": "response.getHeaderNames()${0}" },
    { "trigger": "response.getHeaders", "contents": "response.getHeaders()${0}" },
    { "trigger": "response.hasHeader", "contents": "response.hasHeader(${1:name})${0}" },
    { "trigger": "response.headersSent", "contents": "response.headersSent${0}" },
    { "trigger": "response.removeHeader", "contents": "response.removeHeader(${1:name})${0}" },
    { "trigger": "response.sendDate", "contents": "response.sendDate${0}" },
    { "trigger": "response.setHeader", "contents": "response.setHeader(${1:name}, ${2:value})${0}" },
    { "trigger": "response.setTimeout", "contents": "response.setTimeout(${1:msecs}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "response.socket", "contents": "response.socket${0}" },
    { "trigger": "response.statusCode", "contents": "response.statusCode${0}" },
    { "trigger": "response.statusMessage", "contents": "response.statusMessage${0}" },
    { "trigger": "response.stream", "contents": "response.stream${0}" },
    { "trigger": "response.write", "contents": "response.write(${1:chunk}, ${2:encoding}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "response.writeContinue", "contents": "response.writeContinue()${0}" },
    { "trigger": "response.writeHead", "contents": "response.writeHead(${1:statusCode}, ${2:statusMessage}, ${3:headers})${0}" },
    { "trigger": "response.createPushResponse", "contents": "response.createPushResponse(${1:headers}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "https.Agent", "contents": "https.Agent${0}" },
    { "trigger": "https.Server", "contents": "https.Server${0}" },
    { "trigger": "server.setTimeout", "contents": "server.setTimeout(${1:msecs}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "server.timeout", "contents": "server.timeout${0}" },
    { "trigger": "server.keepAliveTimeout", "contents": "server.keepAliveTimeout${0}" },
    { "trigger": "https.createServer", "contents": "https.createServer(${1:options}, ${2:requestListener})${0}" },
    { "trigger": "server.close", "contents": "server.close(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:handle}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:path}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:port}, ${2:host}, ${3:backlog}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "https.get", "contents": "https.get(${1:options}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "https.globalAgent", "contents": "https.globalAgent${0}" },
    { "trigger": "https.request", "contents": "https.request(${1:options}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "inspector.open", "contents": "inspector.open(${1:port}, ${2:host}, ${3:wait})${0}" },
    { "trigger": "inspector.close", "contents": "inspector.close()${0}" },
    { "trigger": "inspector.url", "contents": "inspector.url()${0}" },
    { "trigger": "inspector.Session", "contents": "inspector.Session()${0}" },
    { "trigger": "session.connect", "contents": "session.connect()${0}" },
    { "trigger": "session.post", "contents": "session.post(${1:method}, ${2:params}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "session.disconnect", "contents": "session.disconnect()${0}" },
    { "trigger": "require.cache", "contents": "require.cache${0}" },
    { "trigger": "require.resolve", "contents": "require.resolve()${0}" },
    { "trigger": "module.children", "contents": "module.children${0}" },
    { "trigger": "module.exports", "contents": "module.exports${0}" },
    { "trigger": "module.filename", "contents": "module.filename${0}" },
    { "trigger": "module.id", "contents": "module.id${0}" },
    { "trigger": "module.loaded", "contents": "module.loaded${0}" },
    { "trigger": "module.parent", "contents": "module.parent${0}" },
    { "trigger": "module.paths", "contents": "module.paths${0}" },
    { "trigger": "module.require", "contents": "module.require(${1:id})${0}" },
    { "trigger": "net.Server", "contents": "net.Server(${1:options}, ${2:connectionListener})${0}" },
    { "trigger": "server.address", "contents": "server.address()${0}" },
    { "trigger": "server.close", "contents": "server.close(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "server.getConnections", "contents": "server.getConnections(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "server.listen", "contents": "server.listen()${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:handle}, ${2:backlog}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:options}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:path}, ${2:backlog}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:port}, ${2:host}, ${3:backlog}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "server.listening", "contents": "server.listening${0}" },
    { "trigger": "server.maxConnections", "contents": "server.maxConnections${0}" },
    { "trigger": "server.ref", "contents": "server.ref()${0}" },
    { "trigger": "server.unref", "contents": "server.unref()${0}" },
    { "trigger": "net.Socket", "contents": "net.Socket(${1:options})${0}" },
    { "trigger": "socket.address", "contents": "socket.address()${0}" },
    { "trigger": "socket.bufferSize", "contents": "socket.bufferSize${0}" },
    { "trigger": "socket.bytesRead", "contents": "socket.bytesRead${0}" },
    { "trigger": "socket.bytesWritten", "contents": "socket.bytesWritten${0}" },
    { "trigger": "socket.connect", "contents": "socket.connect()${0}" },
    { "trigger": "socket.connect", "contents": "socket.connect(${1:options}, ${2:connectListener})${0}" },
    { "trigger": "socket.connect", "contents": "socket.connect(${1:path}, ${2:connectListener})${0}" },
    { "trigger": "socket.connect", "contents": "socket.connect(${1:port}, ${2:host}, ${3:connectListener})${0}" },
    { "trigger": "socket.connecting", "contents": "socket.connecting${0}" },
    { "trigger": "socket.destroy", "contents": "socket.destroy(${1:exception})${0}" },
    { "trigger": "socket.destroyed", "contents": "socket.destroyed${0}" },
    { "trigger": "socket.end", "contents": "socket.end(${1:data}, ${2:encoding})${0}" },
    { "trigger": "socket.localAddress", "contents": "socket.localAddress${0}" },
    { "trigger": "socket.localPort", "contents": "socket.localPort${0}" },
    { "trigger": "socket.pause", "contents": "socket.pause()${0}" },
    { "trigger": "socket.ref", "contents": "socket.ref()${0}" },
    { "trigger": "socket.remoteAddress", "contents": "socket.remoteAddress${0}" },
    { "trigger": "socket.remoteFamily", "contents": "socket.remoteFamily${0}" },
    { "trigger": "socket.remotePort", "contents": "socket.remotePort${0}" },
    { "trigger": "socket.resume", "contents": "socket.resume()${0}" },
    { "trigger": "socket.setEncoding", "contents": "socket.setEncoding(${1:encoding})${0}" },
    { "trigger": "socket.setKeepAlive", "contents": "socket.setKeepAlive(${1:enable}, ${2:initialDelay})${0}" },
    { "trigger": "socket.setNoDelay", "contents": "socket.setNoDelay(${1:noDelay})${0}" },
    { "trigger": "socket.setTimeout", "contents": "socket.setTimeout(${1:timeout}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "socket.unref", "contents": "socket.unref()${0}" },
    { "trigger": "socket.write", "contents": "socket.write(${1:data}, ${2:encoding}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "net.connect", "contents": "net.connect(${1:options}, ${2:connectListener})${0}" },
    { "trigger": "net.connect", "contents": "net.connect(${1:path}, ${2:connectListener})${0}" },
    { "trigger": "net.connect", "contents": "net.connect(${1:port}, ${2:host}, ${3:connectListener})${0}" },
    { "trigger": "net.createConnection", "contents": "net.createConnection(${1:options}, ${2:connectListener})${0}" },
    { "trigger": "net.createConnection", "contents": "net.createConnection(${1:path}, ${2:connectListener})${0}" },
    { "trigger": "net.createConnection", "contents": "net.createConnection(${1:port}, ${2:host}, ${3:connectListener})${0}" },
    { "trigger": "net.createServer", "contents": "net.createServer(${1:options}, ${2:connectionListener})${0}" },
    { "trigger": "net.isIP", "contents": "net.isIP(${1:input})${0}" },
    { "trigger": "net.isIPv4", "contents": "net.isIPv4(${1:input})${0}" },
    { "trigger": "net.isIPv6", "contents": "net.isIPv6(${1:input})${0}" },
    { "trigger": "os.EOL", "contents": "os.EOL${0}" },
    { "trigger": "os.arch", "contents": "os.arch()${0}" },
    { "trigger": "os.constants", "contents": "os.constants${0}" },
    { "trigger": "os.cpus", "contents": "os.cpus()${0}" },
    { "trigger": "os.endianness", "contents": "os.endianness()${0}" },
    { "trigger": "os.freemem", "contents": "os.freemem()${0}" },
    { "trigger": "os.homedir", "contents": "os.homedir()${0}" },
    { "trigger": "os.hostname", "contents": "os.hostname()${0}" },
    { "trigger": "os.loadavg", "contents": "os.loadavg()${0}" },
    { "trigger": "os.networkInterfaces", "contents": "os.networkInterfaces()${0}" },
    { "trigger": "os.platform", "contents": "os.platform()${0}" },
    { "trigger": "os.release", "contents": "os.release()${0}" },
    { "trigger": "os.tmpdir", "contents": "os.tmpdir()${0}" },
    { "trigger": "os.totalmem", "contents": "os.totalmem()${0}" },
    { "trigger": "os.type", "contents": "os.type()${0}" },
    { "trigger": "os.uptime", "contents": "os.uptime()${0}" },
    { "trigger": "os.userInfo", "contents": "os.userInfo(${1:options})${0}" },
    { "trigger": "path.basename", "contents": "path.basename(${1:path}, ${2:ext})${0}" },
    { "trigger": "path.delimiter", "contents": "path.delimiter${0}" },
    { "trigger": "path.dirname", "contents": "path.dirname(${1:path})${0}" },
    { "trigger": "path.extname", "contents": "path.extname(${1:path})${0}" },
    { "trigger": "path.format", "contents": "path.format(${1:pathObject})${0}" },
    { "trigger": "path.isAbsolute", "contents": "path.isAbsolute(${1:path})${0}" },
    { "trigger": "path.join", "contents": "path.join(${1:...paths})${0}" },
    { "trigger": "path.normalize", "contents": "path.normalize(${1:path})${0}" },
    { "trigger": "path.parse", "contents": "path.parse(${1:path})${0}" },
    { "trigger": "path.posix", "contents": "path.posix${0}" },
    { "trigger": "path.relative", "contents": "path.relative(${1:from}, ${2:to})${0}" },
    { "trigger": "path.resolve", "contents": "path.resolve(${1:...paths})${0}" },
    { "trigger": "path.sep", "contents": "path.sep${0}" },
    { "trigger": "path.win32", "contents": "path.win32${0}" },
    { "trigger": "Performance", "contents": "Performance${0}" },
    { "trigger": "performance.clearFunctions", "contents": "performance.clearFunctions(${1:name})${0}" },
    { "trigger": "performance.clearMarks", "contents": "performance.clearMarks(${1:name})${0}" },
    { "trigger": "performance.clearMeasures", "contents": "performance.clearMeasures(${1:name})${0}" },
    { "trigger": "performance.getEntries", "contents": "performance.getEntries()${0}" },
    { "trigger": "performance.getEntriesByName", "contents": "performance.getEntriesByName(${1:name}, ${2:type})${0}" },
    { "trigger": "performance.getEntriesByType", "contents": "performance.getEntriesByType(${1:type})${0}" },
    { "trigger": "performance.mark", "contents": "performance.mark(${1:name})${0}" },
    { "trigger": "performance.measure", "contents": "performance.measure(${1:name}, ${2:startMark}, ${3:endMark})${0}" },
    { "trigger": "performance.nodeFrame", "contents": "performance.nodeFrame${0}" },
    { "trigger": "performance.nodeTiming", "contents": "performance.nodeTiming${0}" },
    { "trigger": "performance.now", "contents": "performance.now()${0}" },
    { "trigger": "performance.timeOrigin", "contents": "performance.timeOrigin${0}" },
    { "trigger": "performance.timerify", "contents": "performance.timerify(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "PerformanceEntry", "contents": "PerformanceEntry${0}" },
    { "trigger": "performanceEntry.duration", "contents": "performanceEntry.duration${0}" },
    { "trigger": "performanceEntry.name", "contents": "performanceEntry.name${0}" },
    { "trigger": "performanceEntry.startTime", "contents": "performanceEntry.startTime${0}" },
    { "trigger": "performanceEntry.entryType", "contents": "performanceEntry.entryType${0}" },
    { "trigger": "performanceEntry.kind", "contents": "performanceEntry.kind${0}" },
    { "trigger": "PerformanceNodeFrame extends PerformanceEntry", "contents": "PerformanceNodeFrame extends PerformanceEntry${0}" },
    { "trigger": "performanceNodeFrame.frameCheck", "contents": "performanceNodeFrame.frameCheck${0}" },
    { "trigger": "performanceNodeFrame.frameCount", "contents": "performanceNodeFrame.frameCount${0}" },
    { "trigger": "performanceNodeFrame.frameIdle", "contents": "performanceNodeFrame.frameIdle${0}" },
    { "trigger": "performanceNodeFrame.framesPerSecond", "contents": "performanceNodeFrame.framesPerSecond${0}" },
    { "trigger": "performanceNodeFrame.framePrepare", "contents": "performanceNodeFrame.framePrepare${0}" },
    { "trigger": "PerformanceNodeTiming extends PerformanceEntry", "contents": "PerformanceNodeTiming extends PerformanceEntry${0}" },
    { "trigger": "performanceNodeTiming.bootstrapComplete", "contents": "performanceNodeTiming.bootstrapComplete${0}" },
    { "trigger": "performanceNodeTiming.clusterSetupEnd", "contents": "performanceNodeTiming.clusterSetupEnd${0}" },
    { "trigger": "performanceNodeTiming.clusterSetupStart", "contents": "performanceNodeTiming.clusterSetupStart${0}" },
    { "trigger": "performanceNodeTiming.loopExit", "contents": "performanceNodeTiming.loopExit${0}" },
    { "trigger": "performanceNodeTiming.loopStart", "contents": "performanceNodeTiming.loopStart${0}" },
    { "trigger": "performanceNodeTiming.moduleLoadEnd", "contents": "performanceNodeTiming.moduleLoadEnd${0}" },
    { "trigger": "performanceNodeTiming.moduleLoadStart", "contents": "performanceNodeTiming.moduleLoadStart${0}" },
    { "trigger": "performanceNodeTiming.nodeStart", "contents": "performanceNodeTiming.nodeStart${0}" },
    { "trigger": "performanceNodeTiming.preloadModuleLoadEnd", "contents": "performanceNodeTiming.preloadModuleLoadEnd${0}" },
    { "trigger": "performanceNodeTiming.preloadModuleLoadStart", "contents": "performanceNodeTiming.preloadModuleLoadStart${0}" },
    { "trigger": "performanceNodeTiming.thirdPartyMainEnd", "contents": "performanceNodeTiming.thirdPartyMainEnd${0}" },
    { "trigger": "performanceNodeTiming.thirdPartyMainStart", "contents": "performanceNodeTiming.thirdPartyMainStart${0}" },
    { "trigger": "performanceNodeTiming.v8Start", "contents": "performanceNodeTiming.v8Start${0}" },
    { "trigger": "PerformanceObserver", "contents": "PerformanceObserver(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "performanceObserverEntryList.getEntries", "contents": "performanceObserverEntryList.getEntries()${0}" },
    { "trigger": "performanceObserverEntryList.getEntriesByName", "contents": "performanceObserverEntryList.getEntriesByName(${1:name}, ${2:type})${0}" },
    { "trigger": "performanceObserverEntryList.getEntriesByType", "contents": "performanceObserverEntryList.getEntriesByType(${1:type})${0}" },
    { "trigger": "performanceObserver.disconnect", "contents": "performanceObserver.disconnect()${0}" },
    { "trigger": "performanceObserver.observe", "contents": "performanceObserver.observe(${1:options})${0}" },
    { "trigger": "process.abort", "contents": "process.abort()${0}" },
    { "trigger": "process.arch", "contents": "process.arch${0}" },
    { "trigger": "process.argv", "contents": "process.argv${0}" },
    { "trigger": "process.argv0", "contents": "process.argv0${0}" },
    { "trigger": "process.channel", "contents": "process.channel${0}" },
    { "trigger": "process.chdir", "contents": "process.chdir(${1:directory})${0}" },
    { "trigger": "process.config", "contents": "process.config${0}" },
    { "trigger": "process.connected", "contents": "process.connected${0}" },
    { "trigger": "process.cpuUsage", "contents": "process.cpuUsage(${1:previousValue})${0}" },
    { "trigger": "process.cwd", "contents": "process.cwd()${0}" },
    { "trigger": "process.disconnect", "contents": "process.disconnect()${0}" },
    { "trigger": "process.emitWarning", "contents": "process.emitWarning(${1:warning}, ${2:options})${0}" },
    { "trigger": "process.emitWarning", "contents": "process.emitWarning(${1:warning}, ${2:type}, ${3:code}, ${4:ctor})${0}" },
    { "trigger": "process.env", "contents": "process.env${0}" },
    { "trigger": "process.execArgv", "contents": "process.execArgv${0}" },
    { "trigger": "process.execPath", "contents": "process.execPath${0}" },
    { "trigger": "process.exit", "contents": "process.exit(${1:code})${0}" },
    { "trigger": "process.exitCode", "contents": "process.exitCode${0}" },
    { "trigger": "process.getegid", "contents": "process.getegid()${0}" },
    { "trigger": "process.geteuid", "contents": "process.geteuid()${0}" },
    { "trigger": "process.getgid", "contents": "process.getgid()${0}" },
    { "trigger": "process.getgroups", "contents": "process.getgroups()${0}" },
    { "trigger": "process.getuid", "contents": "process.getuid()${0}" },
    { "trigger": "process.hrtime", "contents": "process.hrtime(${1:time})${0}" },
    { "trigger": "process.initgroups", "contents": "process.initgroups(${1:user}, ${2:extra_group})${0}" },
    { "trigger": "process.kill", "contents": "process.kill(${1:pid}, ${2:signal})${0}" },
    { "trigger": "process.mainModule", "contents": "process.mainModule${0}" },
    { "trigger": "process.memoryUsage", "contents": "process.memoryUsage()${0}" },
    { "trigger": "process.nextTick", "contents": "process.nextTick(function(${1:args}) {\n\t${2:// body}\n}, ${2:...args})${0}" },
    { "trigger": "process.pid", "contents": "process.pid${0}" },
    { "trigger": "process.platform", "contents": "process.platform${0}" },
    { "trigger": "process.release", "contents": "process.release${0}" },
    { "trigger": "process.send", "contents": "process.send(${1:message}, ${2:sendHandle}, ${3:options}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "process.setegid", "contents": "process.setegid(${1:id})${0}" },
    { "trigger": "process.seteuid", "contents": "process.seteuid(${1:id})${0}" },
    { "trigger": "process.setgid", "contents": "process.setgid(${1:id})${0}" },
    { "trigger": "process.setgroups", "contents": "process.setgroups(${1:groups})${0}" },
    { "trigger": "process.setuid", "contents": "process.setuid(${1:id})${0}" },
    { "trigger": "process.stderr", "contents": "process.stderr${0}" },
    { "trigger": "process.stdin", "contents": "process.stdin${0}" },
    { "trigger": "process.stdout", "contents": "process.stdout${0}" },
    { "trigger": "process.title", "contents": "process.title${0}" },
    { "trigger": "process.umask", "contents": "process.umask(${1:mask})${0}" },
    { "trigger": "process.uptime", "contents": "process.uptime()${0}" },
    { "trigger": "process.version", "contents": "process.version${0}" },
    { "trigger": "process.versions", "contents": "process.versions${0}" },
    { "trigger": "punycode.decode", "contents": "punycode.decode(${1:string})${0}" },
    { "trigger": "punycode.encode", "contents": "punycode.encode(${1:string})${0}" },
    { "trigger": "punycode.toASCII", "contents": "punycode.toASCII(${1:domain})${0}" },
    { "trigger": "punycode.toUnicode", "contents": "punycode.toUnicode(${1:domain})${0}" },
    { "trigger": "punycode.ucs2", "contents": "punycode.ucs2${0}" },
    { "trigger": "punycode.ucs2.decode", "contents": "punycode.ucs2.decode(${1:string})${0}" },
    { "trigger": "punycode.ucs2.encode", "contents": "punycode.ucs2.encode(${1:codePoints})${0}" },
    { "trigger": "punycode.version", "contents": "punycode.version${0}" },
    { "trigger": "querystring.escape", "contents": "querystring.escape(${1:str})${0}" },
    { "trigger": "querystring.parse", "contents": "querystring.parse(${1:str}, ${2:sep}, ${3:eq}, ${4:options})${0}" },
    { "trigger": "querystring.stringify", "contents": "querystring.stringify(${1:obj}, ${2:sep}, ${3:eq}, ${4:options})${0}" },
    { "trigger": "querystring.unescape", "contents": "querystring.unescape(${1:str})${0}" },
    { "trigger": "rl.close", "contents": "rl.close()${0}" },
    { "trigger": "rl.pause", "contents": "rl.pause()${0}" },
    { "trigger": "rl.prompt", "contents": "rl.prompt(${1:preserveCursor})${0}" },
    { "trigger": "rl.question", "contents": "rl.question(${1:query}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "rl.resume", "contents": "rl.resume()${0}" },
    { "trigger": "rl.setPrompt", "contents": "rl.setPrompt(${1:prompt})${0}" },
    { "trigger": "rl.write", "contents": "rl.write(${1:data}, ${2:key})${0}" },
    { "trigger": "readline.clearLine", "contents": "readline.clearLine(${1:stream}, ${2:dir})${0}" },
    { "trigger": "readline.clearScreenDown", "contents": "readline.clearScreenDown(${1:stream})${0}" },
    { "trigger": "readline.createInterface", "contents": "readline.createInterface(${1:options})${0}" },
    { "trigger": "readline.cursorTo", "contents": "readline.cursorTo(${1:stream}, ${2:x}, ${3:y})${0}" },
    { "trigger": "readline.emitKeypressEvents", "contents": "readline.emitKeypressEvents(${1:stream}, ${2:interface})${0}" },
    { "trigger": "readline.moveCursor", "contents": "readline.moveCursor(${1:stream}, ${2:dx}, ${3:dy})${0}" },
    { "trigger": "replServer.defineCommand", "contents": "replServer.defineCommand(${1:keyword}, ${2:cmd})${0}" },
    { "trigger": "replServer.displayPrompt", "contents": "replServer.displayPrompt(${1:preserveCursor})${0}" },
    { "trigger": "repl", "contents": "repl${0}" },
    { "trigger": "repl.start", "contents": "repl.start(${1:options})${0}" },
    { "trigger": "stream.Writable", "contents": "stream.Writable(${1:options})${0}" },
    { "trigger": "writable._write", "contents": "writable._write(${1:chunk}, ${2:encoding}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "writable._writev", "contents": "writable._writev(${1:chunks}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "writable._destroy", "contents": "writable._destroy(${1:err}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "writable._final", "contents": "writable._final(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "writable.cork", "contents": "writable.cork()${0}" },
    { "trigger": "writable.end", "contents": "writable.end(${1:chunk}, ${2:encoding}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "writable.setDefaultEncoding", "contents": "writable.setDefaultEncoding(${1:encoding})${0}" },
    { "trigger": "writable.uncork", "contents": "writable.uncork()${0}" },
    { "trigger": "writable.write", "contents": "writable.write(${1:chunk}, ${2:encoding}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "writable.destroy", "contents": "writable.destroy(${1:error})${0}" },
    { "trigger": "stream.Readable", "contents": "stream.Readable(${1:options})${0}" },
    { "trigger": "readable._read", "contents": "readable._read(${1:size})${0}" },
    { "trigger": "readable._destroy", "contents": "readable._destroy(${1:err}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "readable.push", "contents": "readable.push(${1:chunk}, ${2:encoding})${0}" },
    { "trigger": "readable.isPaused", "contents": "readable.isPaused()${0}" },
    { "trigger": "readable.pause", "contents": "readable.pause()${0}" },
    { "trigger": "readable.pipe", "contents": "readable.pipe(${1:destination}, ${2:options})${0}" },
    { "trigger": "readable.read", "contents": "readable.read(${1:size})${0}" },
    { "trigger": "readable.resume", "contents": "readable.resume()${0}" },
    { "trigger": "readable.setEncoding", "contents": "readable.setEncoding(${1:encoding})${0}" },
    { "trigger": "readable.unpipe", "contents": "readable.unpipe(${1:destination})${0}" },
    { "trigger": "readable.unshift", "contents": "readable.unshift(${1:chunk})${0}" },
    { "trigger": "readable.wrap", "contents": "readable.wrap(${1:stream})${0}" },
    { "trigger": "readable.destroy", "contents": "readable.destroy(${1:error})${0}" },
    { "trigger": "stream.Duplex", "contents": "stream.Duplex(${1:options})${0}" },
    { "trigger": "stream.Transform", "contents": "stream.Transform(${1:options})${0}" },
    { "trigger": "transform.destroy", "contents": "transform.destroy(${1:error})${0}" },
    { "trigger": "transform._flush", "contents": "transform._flush(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "transform._transform", "contents": "transform._transform(${1:chunk}, ${2:encoding}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "stream.PassThrough", "contents": "stream.PassThrough${0}" },
    { "trigger": "StringDecoder", "contents": "StringDecoder(${1:encoding})${0}" },
    { "trigger": "stringDecoder.end", "contents": "stringDecoder.end(${1:buffer})${0}" },
    { "trigger": "stringDecoder.write", "contents": "stringDecoder.write(${1:buffer})${0}" },
    { "trigger": "timeout.ref", "contents": "timeout.ref()${0}" },
    { "trigger": "timeout.unref", "contents": "timeout.unref()${0}" },
    { "trigger": "setImmediate", "contents": "setImmediate(function(${1:args}) {\n\t${2:// body}\n}, ${2:...args})${0}" },
    { "trigger": "setInterval", "contents": "setInterval(function(${1:args}) {\n\t${2:// body}\n}, ${2:delay}, ${3:...args})${0}" },
    { "trigger": "setTimeout", "contents": "setTimeout(function(${1:args}) {\n\t${2:// body}\n}, ${2:delay}, ${3:...args})${0}" },
    { "trigger": "clearImmediate", "contents": "clearImmediate(${1:immediate})${0}" },
    { "trigger": "clearInterval", "contents": "clearInterval(${1:timeout})${0}" },
    { "trigger": "clearTimeout", "contents": "clearTimeout(${1:timeout})${0}" },
    { "trigger": "tls.Server", "contents": "tls.Server${0}" },
    { "trigger": "server.addContext", "contents": "server.addContext(${1:hostname}, ${2:context})${0}" },
    { "trigger": "server.address", "contents": "server.address()${0}" },
    { "trigger": "server.close", "contents": "server.close(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "server.getTicketKeys", "contents": "server.getTicketKeys()${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:port}, ${2:hostname}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "server.setTicketKeys", "contents": "server.setTicketKeys(${1:keys})${0}" },
    { "trigger": "tls.TLSSocket", "contents": "tls.TLSSocket${0}" },
    { "trigger": "tls.TLSSocket", "contents": "tls.TLSSocket(${1:socket}, ${2:options})${0}" },
    { "trigger": "tlsSocket.address", "contents": "tlsSocket.address()${0}" },
    { "trigger": "tlsSocket.authorizationError", "contents": "tlsSocket.authorizationError${0}" },
    { "trigger": "tlsSocket.authorized", "contents": "tlsSocket.authorized${0}" },
    { "trigger": "tlsSocket.disableRenegotiation", "contents": "tlsSocket.disableRenegotiation()${0}" },
    { "trigger": "tlsSocket.encrypted", "contents": "tlsSocket.encrypted${0}" },
    { "trigger": "tlsSocket.getCipher", "contents": "tlsSocket.getCipher()${0}" },
    { "trigger": "tlsSocket.getEphemeralKeyInfo", "contents": "tlsSocket.getEphemeralKeyInfo()${0}" },
    { "trigger": "tlsSocket.getPeerCertificate", "contents": "tlsSocket.getPeerCertificate(${1:detailed})${0}" },
    { "trigger": "tlsSocket.getProtocol", "contents": "tlsSocket.getProtocol()${0}" },
    { "trigger": "tlsSocket.getSession", "contents": "tlsSocket.getSession()${0}" },
    { "trigger": "tlsSocket.getTLSTicket", "contents": "tlsSocket.getTLSTicket()${0}" },
    { "trigger": "tlsSocket.localAddress", "contents": "tlsSocket.localAddress${0}" },
    { "trigger": "tlsSocket.localPort", "contents": "tlsSocket.localPort${0}" },
    { "trigger": "tlsSocket.remoteAddress", "contents": "tlsSocket.remoteAddress${0}" },
    { "trigger": "tlsSocket.remoteFamily", "contents": "tlsSocket.remoteFamily${0}" },
    { "trigger": "tlsSocket.remotePort", "contents": "tlsSocket.remotePort${0}" },
    { "trigger": "tlsSocket.renegotiate", "contents": "tlsSocket.renegotiate(${1:options}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "tlsSocket.setMaxSendFragment", "contents": "tlsSocket.setMaxSendFragment(${1:size})${0}" },
    { "trigger": "tls.connect", "contents": "tls.connect(${1:options}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "tls.connect", "contents": "tls.connect(${1:path}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "tls.connect", "contents": "tls.connect(${1:port}, ${2:host}, ${3:options}, function(${4:args}) {\n\t${5:// body}\n})${0}" },
    { "trigger": "tls.createSecureContext", "contents": "tls.createSecureContext(${1:options})${0}" },
    { "trigger": "tls.createServer", "contents": "tls.createServer(${1:options}, ${2:secureConnectionListener})${0}" },
    { "trigger": "tls.getCiphers", "contents": "tls.getCiphers()${0}" },
    { "trigger": "tls.DEFAULT_ECDH_CURVE", "contents": "tls.DEFAULT_ECDH_CURVE${0}" },
    { "trigger": "tty.ReadStream", "contents": "tty.ReadStream${0}" },
    { "trigger": "readStream.isRaw", "contents": "readStream.isRaw${0}" },
    { "trigger": "readStream.setRawMode", "contents": "readStream.setRawMode(${1:mode})${0}" },
    { "trigger": "tty.WriteStream", "contents": "tty.WriteStream${0}" },
    { "trigger": "writeStream.columns", "contents": "writeStream.columns${0}" },
    { "trigger": "writeStream.rows", "contents": "writeStream.rows${0}" },
    { "trigger": "tty.isatty", "contents": "tty.isatty(${1:fd})${0}" },
    { "trigger": "dgram", "contents": "dgram${0}" },
    { "trigger": "dgram.Socket", "contents": "dgram.Socket${0}" },
    { "trigger": "dgram.createSocket", "contents": "dgram.createSocket(${1:type})${0}" },
    { "trigger": "socket.addMembership", "contents": "socket.addMembership(${1:multicastAddress}, ${2:multicastInterface})${0}" },
    { "trigger": "socket.address", "contents": "socket.address()${0}" },
    { "trigger": "socket.bind", "contents": "socket.bind(${1:port}, ${2:address}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "socket.bind", "contents": "socket.bind(${1:options}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "socket.close", "contents": "socket.close(function(${1:args}) {\n\t${2:// body}\n})${0}" },
    { "trigger": "socket.dropMembership", "contents": "socket.dropMembership(${1:multicastAddress}, ${2:multicastInterface})${0}" },
    { "trigger": "socket.ref", "contents": "socket.ref()${0}" },
    { "trigger": "socket.send", "contents": "socket.send(${1:msg}, ${2:offset}, ${3:length}, ${4:port}, ${5:address}, function(${6:args}) {\n\t${7:// body}\n})${0}" },
    { "trigger": "socket.setBroadcast", "contents": "socket.setBroadcast(${1:flag})${0}" },
    { "trigger": "socket.setMulticastInterface", "contents": "socket.setMulticastInterface(${1:multicastInterface})${0}" },
    { "trigger": "socket.setMulticastLoopback", "contents": "socket.setMulticastLoopback(${1:flag})${0}" },
    { "trigger": "socket.setMulticastTTL", "contents": "socket.setMulticastTTL(${1:ttl})${0}" },
    { "trigger": "socket.setTTL", "contents": "socket.setTTL(${1:ttl})${0}" },
    { "trigger": "socket.unref", "contents": "socket.unref()${0}" },
    { "trigger": "URL", "contents": "URL(${1:input}, ${2:base})${0}" },
    { "trigger": "url.hash", "contents": "url.hash${0}" },
    { "trigger": "url.host", "contents": "url.host${0}" },
    { "trigger": "url.hostname", "contents": "url.hostname${0}" },
    { "trigger": "url.href", "contents": "url.href${0}" },
    { "trigger": "url.origin", "contents": "url.origin${0}" },
    { "trigger": "url.password", "contents": "url.password${0}" },
    { "trigger": "url.pathname", "contents": "url.pathname${0}" },
    { "trigger": "url.port", "contents": "url.port${0}" },
    { "trigger": "url.protocol", "contents": "url.protocol${0}" },
    { "trigger": "url.search", "contents": "url.search${0}" },
    { "trigger": "url.searchParams", "contents": "url.searchParams${0}" },
    { "trigger": "url.username", "contents": "url.username${0}" },
    { "trigger": "url.toString", "contents": "url.toString()${0}" },
    { "trigger": "url.toJSON", "contents": "url.toJSON()${0}" },
    { "trigger": "URLSearchParams", "contents": "URLSearchParams()${0}" },
    { "trigger": "URLSearchParams", "contents": "URLSearchParams(${1:string})${0}" },
    { "trigger": "URLSearchParams", "contents": "URLSearchParams(${1:obj})${0}" },
    { "trigger": "URLSearchParams", "contents": "URLSearchParams(${1:iterable})${0}" },
    { "trigger": "urlSearchParams.append", "contents": "urlSearchParams.append(${1:name}, ${2:value})${0}" },
    { "trigger": "urlSearchParams.delete", "contents": "urlSearchParams.delete(${1:name})${0}" },
    { "trigger": "urlSearchParams.entries", "contents": "urlSearchParams.entries()${0}" },
    { "trigger": "urlSearchParams.forEach", "contents": "urlSearchParams.forEach(function(${1:args}) {\n\t${2:// body}\n}, ${2:thisArg})${0}" },
    { "trigger": "urlSearchParams.get", "contents": "urlSearchParams.get(${1:name})${0}" },
    { "trigger": "urlSearchParams.getAll", "contents": "urlSearchParams.getAll(${1:name})${0}" },
    { "trigger": "urlSearchParams.has", "contents": "urlSearchParams.has(${1:name})${0}" },
    { "trigger": "urlSearchParams.keys", "contents": "urlSearchParams.keys()${0}" },
    { "trigger": "urlSearchParams.set", "contents": "urlSearchParams.set(${1:name}, ${2:value})${0}" },
    { "trigger": "urlSearchParams.sort", "contents": "urlSearchParams.sort()${0}" },
    { "trigger": "urlSearchParams.toString", "contents": "urlSearchParams.toString()${0}" },
    { "trigger": "urlSearchParams.values", "contents": "urlSearchParams.values()${0}" },
    { "trigger": "urlSearchParams@@iterator", "contents": "urlSearchParams@@iterator()${0}" },
    { "trigger": "url.domainToASCII", "contents": "url.domainToASCII(${1:domain})${0}" },
    { "trigger": "url.domainToUnicode", "contents": "url.domainToUnicode(${1:domain})${0}" },
    { "trigger": "url.format", "contents": "url.format(${1:URL}, ${2:options})${0}" },
    { "trigger": "urlObject", "contents": "urlObject${0}" },
    { "trigger": "urlObject.auth", "contents": "urlObject.auth${0}" },
    { "trigger": "urlObject.hash", "contents": "urlObject.hash${0}" },
    { "trigger": "urlObject.host", "contents": "urlObject.host${0}" },
    { "trigger": "urlObject.hostname", "contents": "urlObject.hostname${0}" },
    { "trigger": "urlObject.href", "contents": "urlObject.href${0}" },
    { "trigger": "urlObject.path", "contents": "urlObject.path${0}" },
    { "trigger": "urlObject.pathname", "contents": "urlObject.pathname${0}" },
    { "trigger": "urlObject.port", "contents": "urlObject.port${0}" },
    { "trigger": "urlObject.protocol", "contents": "urlObject.protocol${0}" },
    { "trigger": "urlObject.query", "contents": "urlObject.query${0}" },
    { "trigger": "urlObject.search", "contents": "urlObject.search${0}" },
    { "trigger": "urlObject.slashes", "contents": "urlObject.slashes${0}" },
    { "trigger": "url.format", "contents": "url.format(${1:urlObject})${0}" },
    { "trigger": "url.parse", "contents": "url.parse(${1:urlString}, ${2:parseQueryString}, ${3:slashesDenoteHost})${0}" },
    { "trigger": "url.resolve", "contents": "url.resolve(${1:from}, ${2:to})${0}" },
    { "trigger": "util.callbackify", "contents": "util.callbackify(${1:original})${0}" },
    { "trigger": "util.debuglog", "contents": "util.debuglog(${1:section})${0}" },
    { "trigger": "util.deprecate", "contents": "util.deprecate(${1:function}, ${2:string})${0}" },
    { "trigger": "util.format", "contents": "util.format(${1:format}, ${2:...args})${0}" },
    { "trigger": "util.inherits", "contents": "util.inherits(${1:constructor}, ${2:superConstructor})${0}" },
    { "trigger": "util.inspect", "contents": "util.inspect(${1:object}, ${2:options})${0}" },
    { "trigger": "util.inspect.custom", "contents": "util.inspect.custom${0}" },
    { "trigger": "util.inspect.defaultOptions", "contents": "util.inspect.defaultOptions${0}" },
    { "trigger": "util.promisify", "contents": "util.promisify(${1:original})${0}" },
    { "trigger": "util.promisify.custom", "contents": "util.promisify.custom${0}" },
    { "trigger": "util.TextDecoder", "contents": "util.TextDecoder${0}" },
    { "trigger": "TextDecoder", "contents": "TextDecoder(${1:encoding}, ${2:options})${0}" },
    { "trigger": "textDecoder.decode", "contents": "textDecoder.decode(${1:input}, ${2:options})${0}" },
    { "trigger": "textDecoder.encoding", "contents": "textDecoder.encoding${0}" },
    { "trigger": "textDecoder.fatal", "contents": "textDecoder.fatal${0}" },
    { "trigger": "textDecoder.ignoreBOM", "contents": "textDecoder.ignoreBOM${0}" },
    { "trigger": "util.TextEncoder", "contents": "util.TextEncoder${0}" },
    { "trigger": "textEncoder.encode", "contents": "textEncoder.encode(${1:input})${0}" },
    { "trigger": "textDecoder.encoding", "contents": "textDecoder.encoding${0}" },
    { "trigger": "v8.cachedDataVersionTag", "contents": "v8.cachedDataVersionTag()${0}" },
    { "trigger": "v8.getHeapSpaceStatistics", "contents": "v8.getHeapSpaceStatistics()${0}" },
    { "trigger": "v8.getHeapStatistics", "contents": "v8.getHeapStatistics()${0}" },
    { "trigger": "v8.setFlagsFromString", "contents": "v8.setFlagsFromString(${1:string})${0}" },
    { "trigger": "v8.serialize", "contents": "v8.serialize(${1:value})${0}" },
    { "trigger": "v8.deserialize", "contents": "v8.deserialize(${1:buffer})${0}" },
    { "trigger": "v8.Serializer", "contents": "v8.Serializer${0}" },
    { "trigger": "Serializer", "contents": "Serializer()${0}" },
    { "trigger": "serializer.writeHeader", "contents": "serializer.writeHeader()${0}" },
    { "trigger": "serializer.writeValue", "contents": "serializer.writeValue(${1:value})${0}" },
    { "trigger": "serializer.releaseBuffer", "contents": "serializer.releaseBuffer()${0}" },
    { "trigger": "serializer.transferArrayBuffer", "contents": "serializer.transferArrayBuffer(${1:id}, ${2:arrayBuffer})${0}" },
    { "trigger": "serializer.writeUint32", "contents": "serializer.writeUint32(${1:value})${0}" },
    { "trigger": "serializer.writeUint64", "contents": "serializer.writeUint64(${1:hi}, ${2:lo})${0}" },
    { "trigger": "serializer.writeDouble", "contents": "serializer.writeDouble(${1:value})${0}" },
    { "trigger": "serializer.writeRawBytes", "contents": "serializer.writeRawBytes(${1:buffer})${0}" },
    { "trigger": "serializer._writeHostObject", "contents": "serializer._writeHostObject(${1:object})${0}" },
    { "trigger": "serializer._getDataCloneError", "contents": "serializer._getDataCloneError(${1:message})${0}" },
    { "trigger": "serializer._getSharedArrayBufferId", "contents": "serializer._getSharedArrayBufferId(${1:sharedArrayBuffer})${0}" },
    { "trigger": "serializer._setTreatArrayBufferViewsAsHostObjects", "contents": "serializer._setTreatArrayBufferViewsAsHostObjects(${1:flag})${0}" },
    { "trigger": "v8.Deserializer", "contents": "v8.Deserializer${0}" },
    { "trigger": "Deserializer", "contents": "Deserializer(${1:buffer})${0}" },
    { "trigger": "deserializer.readHeader", "contents": "deserializer.readHeader()${0}" },
    { "trigger": "deserializer.readValue", "contents": "deserializer.readValue()${0}" },
    { "trigger": "deserializer.transferArrayBuffer", "contents": "deserializer.transferArrayBuffer(${1:id}, ${2:arrayBuffer})${0}" },
    { "trigger": "deserializer.getWireFormatVersion", "contents": "deserializer.getWireFormatVersion()${0}" },
    { "trigger": "deserializer.readUint32", "contents": "deserializer.readUint32()${0}" },
    { "trigger": "deserializer.readUint64", "contents": "deserializer.readUint64()${0}" },
    { "trigger": "deserializer.readDouble", "contents": "deserializer.readDouble()${0}" },
    { "trigger": "deserializer.readRawBytes", "contents": "deserializer.readRawBytes(${1:length})${0}" },
    { "trigger": "deserializer._readHostObject", "contents": "deserializer._readHostObject()${0}" },
    { "trigger": "v8.DefaultSerializer", "contents": "v8.DefaultSerializer${0}" },
    { "trigger": "v8.DefaultDeserializer", "contents": "v8.DefaultDeserializer${0}" },
    { "trigger": "vm.Script", "contents": "vm.Script(${1:code}, ${2:options})${0}" },
    { "trigger": "script.runInContext", "contents": "script.runInContext(${1:contextifiedSandbox}, ${2:options})${0}" },
    { "trigger": "script.runInNewContext", "contents": "script.runInNewContext(${1:sandbox}, ${2:options})${0}" },
    { "trigger": "script.runInThisContext", "contents": "script.runInThisContext(${1:options})${0}" },
    { "trigger": "vm.createContext", "contents": "vm.createContext(${1:sandbox})${0}" },
    { "trigger": "vm.isContext", "contents": "vm.isContext(${1:sandbox})${0}" },
    { "trigger": "vm.runInContext", "contents": "vm.runInContext(${1:code}, ${2:contextifiedSandbox}, ${3:options})${0}" },
    { "trigger": "vm.runInNewContext", "contents": "vm.runInNewContext(${1:code}, ${2:sandbox}, ${3:options})${0}" },
    { "trigger": "vm.runInThisContext", "contents": "vm.runInThisContext(${1:code}, ${2:options})${0}" },
    { "trigger": "zlib.Deflate", "contents": "zlib.Deflate${0}" },
    { "trigger": "zlib.DeflateRaw", "contents": "zlib.DeflateRaw${0}" },
    { "trigger": "zlib.Gunzip", "contents": "zlib.Gunzip${0}" },
    { "trigger": "zlib.Gzip", "contents": "zlib.Gzip${0}" },
    { "trigger": "zlib.Inflate", "contents": "zlib.Inflate${0}" },
    { "trigger": "zlib.InflateRaw", "contents": "zlib.InflateRaw${0}" },
    { "trigger": "zlib.Unzip", "contents": "zlib.Unzip${0}" },
    { "trigger": "zlib.Zlib", "contents": "zlib.Zlib${0}" },
    { "trigger": "zlib.bytesRead", "contents": "zlib.bytesRead${0}" },
    { "trigger": "zlib.flush", "contents": "zlib.flush(${1:kind}, function(${2:args}) {\n\t${3:// body}\n})${0}" },
    { "trigger": "zlib.params", "contents": "zlib.params(${1:level}, ${2:strategy}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "zlib.reset", "contents": "zlib.reset()${0}" },
    { "trigger": "zlib.constants", "contents": "zlib.constants${0}" },
    { "trigger": "zlib.createDeflate", "contents": "zlib.createDeflate(${1:options})${0}" },
    { "trigger": "zlib.createDeflateRaw", "contents": "zlib.createDeflateRaw(${1:options})${0}" },
    { "trigger": "zlib.createGunzip", "contents": "zlib.createGunzip(${1:options})${0}" },
    { "trigger": "zlib.createGzip", "contents": "zlib.createGzip(${1:options})${0}" },
    { "trigger": "zlib.createInflate", "contents": "zlib.createInflate(${1:options})${0}" },
    { "trigger": "zlib.createInflateRaw", "contents": "zlib.createInflateRaw(${1:options})${0}" },
    { "trigger": "zlib.createUnzip", "contents": "zlib.createUnzip(${1:options})${0}" },
    { "trigger": "zlib.deflate", "contents": "zlib.deflate(${1:buffer}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "zlib.deflateSync", "contents": "zlib.deflateSync(${1:buffer}, ${2:options})${0}" },
    { "trigger": "zlib.deflateRaw", "contents": "zlib.deflateRaw(${1:buffer}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "zlib.deflateRawSync", "contents": "zlib.deflateRawSync(${1:buffer}, ${2:options})${0}" },
    { "trigger": "zlib.gunzip", "contents": "zlib.gunzip(${1:buffer}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "zlib.gunzipSync", "contents": "zlib.gunzipSync(${1:buffer}, ${2:options})${0}" },
    { "trigger": "zlib.gzip", "contents": "zlib.gzip(${1:buffer}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "zlib.gzipSync", "contents": "zlib.gzipSync(${1:buffer}, ${2:options})${0}" },
    { "trigger": "zlib.inflate", "contents": "zlib.inflate(${1:buffer}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "zlib.inflateSync", "contents": "zlib.inflateSync(${1:buffer}, ${2:options})${0}" },
    { "trigger": "zlib.inflateRaw", "contents": "zlib.inflateRaw(${1:buffer}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "zlib.inflateRawSync", "contents": "zlib.inflateRawSync(${1:buffer}, ${2:options})${0}" },
    { "trigger": "zlib.unzip", "contents": "zlib.unzip(${1:buffer}, ${2:options}, function(${3:args}) {\n\t${4:// body}\n})${0}" },
    { "trigger": "zlib.unzipSync", "contents": "zlib.unzipSync(${1:buffer}, ${2:options})${0}" }
  ]
}