{
  "scope": [
  "source.js"
  ],

  "completions": [
    { "trigger": "assert.fail", "contents": "assert.fail(${1:actual}, ${2:expected}, ${3:message}, ${4:operator})${0}" },
    { "trigger": "assert", "contents": "assert(${1:value}, ${2:message}), assert.ok(${1:value}, ${2:[message]})${0}" },
    { "trigger": "assert.equal", "contents": "assert.equal(${1:actual}, ${2:expected}, ${3:[message]})${0}" },
    { "trigger": "assert.notEqual", "contents": "assert.notEqual(${1:actual}, ${2:expected}, ${3:[message]})${0}" },
    { "trigger": "assert.deepEqual", "contents": "assert.deepEqual(${1:actual}, ${2:expected}, ${3:[message]})${0}" },
    { "trigger": "assert.notDeepEqual", "contents": "assert.notDeepEqual(${1:actual}, ${2:expected}, ${3:[message]})${0}" },
    { "trigger": "assert.strictEqual", "contents": "assert.strictEqual(${1:actual}, ${2:expected}, ${3:[message]})${0}" },
    { "trigger": "assert.notStrictEqual", "contents": "assert.notStrictEqual(${1:actual}, ${2:expected}, ${3:[message]})${0}" },
    { "trigger": "assert.throws", "contents": "assert.throws(${1:block}, ${2:[error]}, ${3:[message]})${0}" },
    { "trigger": "assert.doesNotThrow", "contents": "assert.doesNotThrow(${1:block}, ${2:[message]})${0}" },
    { "trigger": "assert.ifError", "contents": "assert.ifError(${1:value})${0}" },
    { "trigger": "Buffer", "contents": "Buffer(${1:size})${0}" },
    { "trigger": "Buffer", "contents": "Buffer(${1:array})${0}" },
    { "trigger": "Buffer", "contents": "Buffer(${1:str}, ${2:[encoding]})${0}" },
    { "trigger": "buf.write", "contents": "buf.write(${1:string}, ${2:[offset]}, ${3:[length]}, ${4:[encoding]})${0}" },
    { "trigger": "buf.toString", "contents": "buf.toString(${1:[encoding]}, ${2:[start]}, ${3:[end]})${0}" },
    { "trigger": "buf.toJSON", "contents": "buf.toJSON()${0}" },
    { "trigger": "buf[index]", "contents": "buf[index]${0}" },
    { "trigger": "buf.length", "contents": "buf.length${0}" },
    { "trigger": "buf.copy", "contents": "buf.copy(${1:targetBuffer}, ${2:[targetStart]}, ${3:[sourceStart]}, ${4:[sourceEnd]})${0}" },
    { "trigger": "buf.slice", "contents": "buf.slice(${1:[start]}, ${2:[end]})${0}" },
    { "trigger": "buf.readUInt8", "contents": "buf.readUInt8(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readUInt16LE", "contents": "buf.readUInt16LE(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readUInt16BE", "contents": "buf.readUInt16BE(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readUInt32LE", "contents": "buf.readUInt32LE(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readUInt32BE", "contents": "buf.readUInt32BE(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readInt8", "contents": "buf.readInt8(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readInt16LE", "contents": "buf.readInt16LE(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readInt16BE", "contents": "buf.readInt16BE(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readInt32LE", "contents": "buf.readInt32LE(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readInt32BE", "contents": "buf.readInt32BE(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readFloatLE", "contents": "buf.readFloatLE(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readFloatBE", "contents": "buf.readFloatBE(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readDoubleLE", "contents": "buf.readDoubleLE(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.readDoubleBE", "contents": "buf.readDoubleBE(${1:offset}, ${2:[noAssert]})${0}" },
    { "trigger": "buf.writeUInt8", "contents": "buf.writeUInt8(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeUInt16LE", "contents": "buf.writeUInt16LE(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeUInt16BE", "contents": "buf.writeUInt16BE(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeUInt32LE", "contents": "buf.writeUInt32LE(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeUInt32BE", "contents": "buf.writeUInt32BE(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeInt8", "contents": "buf.writeInt8(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeInt16LE", "contents": "buf.writeInt16LE(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeInt16BE", "contents": "buf.writeInt16BE(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeInt32LE", "contents": "buf.writeInt32LE(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeInt32BE", "contents": "buf.writeInt32BE(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeFloatLE", "contents": "buf.writeFloatLE(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeFloatBE", "contents": "buf.writeFloatBE(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeDoubleLE", "contents": "buf.writeDoubleLE(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.writeDoubleBE", "contents": "buf.writeDoubleBE(${1:value}, ${2:offset}, ${3:[noAssert]})${0}" },
    { "trigger": "buf.fill", "contents": "buf.fill(${1:value}, ${2:[offset]}, ${3:[end]})${0}" },
    { "trigger": "buffer.INSPECT_MAX_BYTES", "contents": "buffer.INSPECT_MAX_BYTES${0}" },
    { "trigger": "child.stdout", "contents": "child.stdout${0}" },
    { "trigger": "child.stderr", "contents": "child.stderr${0}" },
    { "trigger": "child.pid", "contents": "child.pid${0}" },
    { "trigger": "child.connected", "contents": "child.connected${0}" },
    { "trigger": "child.kill", "contents": "child.kill(${1:[signal]})${0}" },
    { "trigger": "child.send", "contents": "child.send(${1:message}, ${2:[sendHandle]})${0}" },
    { "trigger": "child.disconnect", "contents": "child.disconnect()${0}" },
    { "trigger": "child_process.spawn", "contents": "child_process.spawn(${1:command}, ${2:[args]}, ${3:[options]})${0}" },
    { "trigger": "child_process.exec", "contents": "child_process.exec(${1:command}, ${2:[options]}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "child_process.execFile", "contents": "child_process.execFile(${1:file}, ${2:[args]}, ${3:[options]}, ${4:[callback]})${0}" },
    { "trigger": "child_process.fork", "contents": "child_process.fork(${1:modulePath}, ${2:[args]}, ${3:[options]})${0}" },
    { "trigger": "console.log", "contents": "console.log(${1:[data]}, ${2:[...]})${0}" },
    { "trigger": "console.info", "contents": "console.info(${1:[data]}, ${2:[...]})${0}" },
    { "trigger": "console.error", "contents": "console.error(${1:[data]}, ${2:[...]})${0}" },
    { "trigger": "console.warn", "contents": "console.warn(${1:[data]}, ${2:[...]})${0}" },
    { "trigger": "console.dir", "contents": "console.dir(${1:obj})${0}" },
    { "trigger": "console.time", "contents": "console.time(${1:label})${0}" },
    { "trigger": "console.timeEnd", "contents": "console.timeEnd(${1:label})${0}" },
    { "trigger": "console.trace", "contents": "console.trace(${1:label})${0}" },
    { "trigger": "console.assert", "contents": "console.assert(${1:expression}, ${2:[message]})${0}" },
    { "trigger": "cluster.settings", "contents": "cluster.settings${0}" },
    { "trigger": "cluster.isMaster", "contents": "cluster.isMaster${0}" },
    { "trigger": "cluster.isWorker", "contents": "cluster.isWorker${0}" },
    { "trigger": "cluster.setupMaster", "contents": "cluster.setupMaster(${1:[settings]})${0}" },
    { "trigger": "cluster.fork", "contents": "cluster.fork(${1:[env]})${0}" },
    { "trigger": "cluster.disconnect", "contents": "cluster.disconnect(${1:[callback]})${0}" },
    { "trigger": "cluster.worker", "contents": "cluster.worker${0}" },
    { "trigger": "cluster.workers", "contents": "cluster.workers${0}" },
    { "trigger": "worker.id", "contents": "worker.id${0}" },
    { "trigger": "worker.process", "contents": "worker.process${0}" },
    { "trigger": "worker.suicide", "contents": "worker.suicide${0}" },
    { "trigger": "worker.send", "contents": "worker.send(${1:message}, ${2:[sendHandle]})${0}" },
    { "trigger": "worker.kill", "contents": "worker.kill(${1:[signal='SIGTERM']})${0}" },
    { "trigger": "worker.disconnect", "contents": "worker.disconnect()${0}" },
    { "trigger": "crypto.getCiphers", "contents": "crypto.getCiphers()${0}" },
    { "trigger": "crypto.getHashes", "contents": "crypto.getHashes()${0}" },
    { "trigger": "crypto.createCredentials", "contents": "crypto.createCredentials(${1:details})${0}" },
    { "trigger": "crypto.createHash", "contents": "crypto.createHash(${1:algorithm})${0}" },
    { "trigger": "hash.update", "contents": "hash.update(${1:data}, ${2:[input_encoding]})${0}" },
    { "trigger": "hash.digest", "contents": "hash.digest(${1:[encoding]})${0}" },
    { "trigger": "crypto.createHmac", "contents": "crypto.createHmac(${1:algorithm}, ${2:key})${0}" },
    { "trigger": "hmac.update", "contents": "hmac.update(${1:data})${0}" },
    { "trigger": "hmac.digest", "contents": "hmac.digest(${1:[encoding]})${0}" },
    { "trigger": "crypto.createCipher", "contents": "crypto.createCipher(${1:algorithm}, ${2:password})${0}" },
    { "trigger": "crypto.createCipheriv", "contents": "crypto.createCipheriv(${1:algorithm}, ${2:key}, ${3:iv})${0}" },
    { "trigger": "cipher.update", "contents": "cipher.update(${1:data}, ${2:[input_encoding]}, ${3:[output_encoding]})${0}" },
    { "trigger": "cipher.final", "contents": "cipher.final(${1:[output_encoding]})${0}" },
    { "trigger": "cipher.setAutoPadding", "contents": "cipher.setAutoPadding(${1:auto_padding=true})${0}" },
    { "trigger": "crypto.createDecipher", "contents": "crypto.createDecipher(${1:algorithm}, ${2:password})${0}" },
    { "trigger": "crypto.createDecipheriv", "contents": "crypto.createDecipheriv(${1:algorithm}, ${2:key}, ${3:iv})${0}" },
    { "trigger": "decipher.update", "contents": "decipher.update(${1:data}, ${2:[input_encoding]}, ${3:[output_encoding]})${0}" },
    { "trigger": "decipher.final", "contents": "decipher.final(${1:[output_encoding]})${0}" },
    { "trigger": "decipher.setAutoPadding", "contents": "decipher.setAutoPadding(${1:auto_padding=true})${0}" },
    { "trigger": "crypto.createSign", "contents": "crypto.createSign(${1:algorithm})${0}" },
    { "trigger": "sign.update", "contents": "sign.update(${1:data})${0}" },
    { "trigger": "sign.sign", "contents": "sign.sign(${1:private_key}, ${2:[output_format]})${0}" },
    { "trigger": "crypto.createVerify", "contents": "crypto.createVerify(${1:algorithm})${0}" },
    { "trigger": "verifier.update", "contents": "verifier.update(${1:data})${0}" },
    { "trigger": "verifier.verify", "contents": "verifier.verify(${1:object}, ${2:signature}, ${3:[signature_format]})${0}" },
    { "trigger": "crypto.createDiffieHellman", "contents": "crypto.createDiffieHellman(${1:prime_length})${0}" },
    { "trigger": "crypto.createDiffieHellman", "contents": "crypto.createDiffieHellman(${1:prime}, ${2:[encoding]})${0}" },
    { "trigger": "diffieHellman.generateKeys", "contents": "diffieHellman.generateKeys(${1:[encoding]})${0}" },
    { "trigger": "diffieHellman.computeSecret", "contents": "diffieHellman.computeSecret(${1:other_public_key}, ${2:[input_encoding]}, ${3:[output_encoding]})${0}" },
    { "trigger": "diffieHellman.getPrime", "contents": "diffieHellman.getPrime(${1:[encoding]})${0}" },
    { "trigger": "diffieHellman.getGenerator", "contents": "diffieHellman.getGenerator(${1:[encoding]})${0}" },
    { "trigger": "diffieHellman.getPublicKey", "contents": "diffieHellman.getPublicKey(${1:[encoding]})${0}" },
    { "trigger": "diffieHellman.getPrivateKey", "contents": "diffieHellman.getPrivateKey(${1:[encoding]})${0}" },
    { "trigger": "diffieHellman.setPublicKey", "contents": "diffieHellman.setPublicKey(${1:public_key}, ${2:[encoding]})${0}" },
    { "trigger": "diffieHellman.setPrivateKey", "contents": "diffieHellman.setPrivateKey(${1:private_key}, ${2:[encoding]})${0}" },
    { "trigger": "crypto.getDiffieHellman", "contents": "crypto.getDiffieHellman(${1:group_name})${0}" },
    { "trigger": "crypto.pbkdf2", "contents": "crypto.pbkdf2(${1:password}, ${2:salt}, ${3:iterations}, ${4:keylen}, function(${5:args}){\n\t${6:// body}\n})${0}" },
    { "trigger": "crypto.pbkdf2Sync", "contents": "crypto.pbkdf2Sync(${1:password}, ${2:salt}, ${3:iterations}, ${4:keylen})${0}" },
    { "trigger": "crypto.randomBytes", "contents": "crypto.randomBytes(${1:size}, ${2:[callback]})${0}" },
    { "trigger": "crypto.pseudoRandomBytes", "contents": "crypto.pseudoRandomBytes(${1:size}, ${2:[callback]})${0}" },
    { "trigger": "crypto.DEFAULT_ENCODING", "contents": "crypto.DEFAULT_ENCODING${0}" },
    { "trigger": "decoder.write", "contents": "decoder.write(${1:buffer})${0}" },
    { "trigger": "decoder.end", "contents": "decoder.end()${0}" },
    { "trigger": "domain.create", "contents": "domain.create()${0}" },
    { "trigger": "domain.run", "contents": "domain.run(${1:fn})${0}" },
    { "trigger": "domain.members", "contents": "domain.members${0}" },
    { "trigger": "domain.add", "contents": "domain.add(${1:emitter})${0}" },
    { "trigger": "domain.remove", "contents": "domain.remove(${1:emitter})${0}" },
    { "trigger": "domain.bind", "contents": "domain.bind(function(${1:args}){\n\t${2:// body}\n})${0}" },
    { "trigger": "domain.intercept", "contents": "domain.intercept(function(${1:args}){\n\t${2:// body}\n})${0}" },
    { "trigger": "domain.enter", "contents": "domain.enter()${0}" },
    { "trigger": "domain.exit", "contents": "domain.exit()${0}" },
    { "trigger": "domain.dispose", "contents": "domain.dispose()${0}" },
    { "trigger": "dns.lookup", "contents": "dns.lookup(${1:domain}, ${2:[family]}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "dns.resolve", "contents": "dns.resolve(${1:domain}, ${2:[rrtype]}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "dns.resolve4", "contents": "dns.resolve4(${1:domain}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolve6", "contents": "dns.resolve6(${1:domain}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolveMx", "contents": "dns.resolveMx(${1:domain}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolveTxt", "contents": "dns.resolveTxt(${1:domain}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolveSrv", "contents": "dns.resolveSrv(${1:domain}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolveNs", "contents": "dns.resolveNs(${1:domain}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.resolveCname", "contents": "dns.resolveCname(${1:domain}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "dns.reverse", "contents": "dns.reverse(${1:ip}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "emitter.addListener", "contents": "emitter.addListener(${1:event}, ${2:listener})${0}" },
    { "trigger": "emitter.on", "contents": "emitter.on(${1:event}, ${2:listener})${0}" },
    { "trigger": "emitter.once", "contents": "emitter.once(${1:event}, ${2:listener})${0}" },
    { "trigger": "emitter.removeListener", "contents": "emitter.removeListener(${1:event}, ${2:listener})${0}" },
    { "trigger": "emitter.removeAllListeners", "contents": "emitter.removeAllListeners(${1:[event]})${0}" },
    { "trigger": "emitter.setMaxListeners", "contents": "emitter.setMaxListeners(${1:n})${0}" },
    { "trigger": "emitter.listeners", "contents": "emitter.listeners(${1:event})${0}" },
    { "trigger": "emitter.emit", "contents": "emitter.emit(${1:event}, ${2:[arg1]}, ${3:[arg2]}, ${4:[...]})${0}" },
    { "trigger": "http.STATUS_CODES", "contents": "http.STATUS_CODES${0}" },
    { "trigger": "http.createServer", "contents": "http.createServer(${1:[requestListener]})${0}" },
    { "trigger": "http.createClient", "contents": "http.createClient(${1:[port]}, ${2:[host]})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:port}, ${2:[hostname]}, ${3:[backlog]}, ${4:[callback]})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:path}, ${2:[callback]})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:handle}, ${2:[callback]})${0}" },
    { "trigger": "server.close", "contents": "server.close(${1:[callback]})${0}" },
    { "trigger": "server.maxHeadersCount", "contents": "server.maxHeadersCount${0}" },
    { "trigger": "server.setTimeout", "contents": "server.setTimeout(${1:msecs}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "server.timeout", "contents": "server.timeout${0}" },
    { "trigger": "response.writeContinue", "contents": "response.writeContinue()${0}" },
    { "trigger": "response.writeHead", "contents": "response.writeHead(${1:statusCode}, ${2:[reasonPhrase]}, ${3:[headers]})${0}" },
    { "trigger": "response.setTimeout", "contents": "response.setTimeout(${1:msecs}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "response.statusCode", "contents": "response.statusCode${0}" },
    { "trigger": "response.setHeader", "contents": "response.setHeader(${1:name}, ${2:value})${0}" },
    { "trigger": "response.headersSent", "contents": "response.headersSent${0}" },
    { "trigger": "response.sendDate", "contents": "response.sendDate${0}" },
    { "trigger": "response.getHeader", "contents": "response.getHeader(${1:name})${0}" },
    { "trigger": "response.removeHeader", "contents": "response.removeHeader(${1:name})${0}" },
    { "trigger": "response.write", "contents": "response.write(${1:chunk}, ${2:[encoding]})${0}" },
    { "trigger": "response.addTrailers", "contents": "response.addTrailers(${1:headers})${0}" },
    { "trigger": "response.end", "contents": "response.end(${1:[data]}, ${2:[encoding]})${0}" },
    { "trigger": "http.request", "contents": "http.request(${1:options}, ${2:[callback]})${0}" },
    { "trigger": "http.get", "contents": "http.get(${1:options}, ${2:[callback]})${0}" },
    { "trigger": "agent.maxSockets", "contents": "agent.maxSockets${0}" },
    { "trigger": "agent.sockets", "contents": "agent.sockets${0}" },
    { "trigger": "agent.requests", "contents": "agent.requests${0}" },
    { "trigger": "http.globalAgent", "contents": "http.globalAgent${0}" },
    { "trigger": "request.write", "contents": "request.write(${1:chunk}, ${2:[encoding]})${0}" },
    { "trigger": "request.end", "contents": "request.end(${1:[data]}, ${2:[encoding]})${0}" },
    { "trigger": "request.abort", "contents": "request.abort()${0}" },
    { "trigger": "request.setTimeout", "contents": "request.setTimeout(${1:timeout}, ${2:[callback]})${0}" },
    { "trigger": "request.setNoDelay", "contents": "request.setNoDelay(${1:[noDelay]})${0}" },
    { "trigger": "request.setSocketKeepAlive", "contents": "request.setSocketKeepAlive(${1:[enable]}, ${2:[initialDelay]})${0}" },
    { "trigger": "http.IncomingMessage", "contents": "http.IncomingMessage${0}" },
    { "trigger": "message.httpVersion", "contents": "message.httpVersion${0}" },
    { "trigger": "message.headers", "contents": "message.headers${0}" },
    { "trigger": "message.trailers", "contents": "message.trailers${0}" },
    { "trigger": "message.setTimeout", "contents": "message.setTimeout(${1:msecs}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "message.method", "contents": "message.method${0}" },
    { "trigger": "message.url", "contents": "message.url${0}" },
    { "trigger": "message.statusCode", "contents": "message.statusCode${0}" },
    { "trigger": "message.socket", "contents": "message.socket${0}" },
    { "trigger": "https.createServer", "contents": "https.createServer(${1:options}, ${2:[requestListener]})${0}" },
    { "trigger": "https.request", "contents": "https.request(${1:options}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "https.get", "contents": "https.get(${1:options}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "https.globalAgent", "contents": "https.globalAgent${0}" },
    { "trigger": "fs.rename", "contents": "fs.rename(${1:oldPath}, ${2:newPath}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.renameSync", "contents": "fs.renameSync(${1:oldPath}, ${2:newPath})${0}" },
    { "trigger": "fs.ftruncate", "contents": "fs.ftruncate(${1:fd}, ${2:len}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.ftruncateSync", "contents": "fs.ftruncateSync(${1:fd}, ${2:len})${0}" },
    { "trigger": "fs.truncate", "contents": "fs.truncate(${1:path}, ${2:len}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.truncateSync", "contents": "fs.truncateSync(${1:path}, ${2:len})${0}" },
    { "trigger": "fs.chown", "contents": "fs.chown(${1:path}, ${2:uid}, ${3:gid}, function(${4:args}){\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.chownSync", "contents": "fs.chownSync(${1:path}, ${2:uid}, ${3:gid})${0}" },
    { "trigger": "fs.fchown", "contents": "fs.fchown(${1:fd}, ${2:uid}, ${3:gid}, function(${4:args}){\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.fchownSync", "contents": "fs.fchownSync(${1:fd}, ${2:uid}, ${3:gid})${0}" },
    { "trigger": "fs.lchown", "contents": "fs.lchown(${1:path}, ${2:uid}, ${3:gid}, function(${4:args}){\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.lchownSync", "contents": "fs.lchownSync(${1:path}, ${2:uid}, ${3:gid})${0}" },
    { "trigger": "fs.chmod", "contents": "fs.chmod(${1:path}, ${2:mode}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.chmodSync", "contents": "fs.chmodSync(${1:path}, ${2:mode})${0}" },
    { "trigger": "fs.fchmod", "contents": "fs.fchmod(${1:fd}, ${2:mode}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.fchmodSync", "contents": "fs.fchmodSync(${1:fd}, ${2:mode})${0}" },
    { "trigger": "fs.lchmod", "contents": "fs.lchmod(${1:path}, ${2:mode}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.lchmodSync", "contents": "fs.lchmodSync(${1:path}, ${2:mode})${0}" },
    { "trigger": "fs.stat", "contents": "fs.stat(${1:path}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.lstat", "contents": "fs.lstat(${1:path}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.fstat", "contents": "fs.fstat(${1:fd}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.statSync", "contents": "fs.statSync(${1:path})${0}" },
    { "trigger": "fs.lstatSync", "contents": "fs.lstatSync(${1:path})${0}" },
    { "trigger": "fs.fstatSync", "contents": "fs.fstatSync(${1:fd})${0}" },
    { "trigger": "fs.link", "contents": "fs.link(${1:srcpath}, ${2:dstpath}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.linkSync", "contents": "fs.linkSync(${1:srcpath}, ${2:dstpath})${0}" },
    { "trigger": "fs.symlink", "contents": "fs.symlink(${1:srcpath}, ${2:dstpath}, ${3:[type]}, function(${4:args}){\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.symlinkSync", "contents": "fs.symlinkSync(${1:srcpath}, ${2:dstpath}, ${3:[type]})${0}" },
    { "trigger": "fs.readlink", "contents": "fs.readlink(${1:path}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.readlinkSync", "contents": "fs.readlinkSync(${1:path})${0}" },
    { "trigger": "fs.realpath", "contents": "fs.realpath(${1:path}, ${2:[cache]}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.realpathSync", "contents": "fs.realpathSync(${1:path}, ${2:[cache]})${0}" },
    { "trigger": "fs.unlink", "contents": "fs.unlink(${1:path}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.unlinkSync", "contents": "fs.unlinkSync(${1:path})${0}" },
    { "trigger": "fs.rmdir", "contents": "fs.rmdir(${1:path}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.rmdirSync", "contents": "fs.rmdirSync(${1:path})${0}" },
    { "trigger": "fs.mkdir", "contents": "fs.mkdir(${1:path}, ${2:[mode]}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.mkdirSync", "contents": "fs.mkdirSync(${1:path}, ${2:[mode]})${0}" },
    { "trigger": "fs.readdir", "contents": "fs.readdir(${1:path}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.readdirSync", "contents": "fs.readdirSync(${1:path})${0}" },
    { "trigger": "fs.close", "contents": "fs.close(${1:fd}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.closeSync", "contents": "fs.closeSync(${1:fd})${0}" },
    { "trigger": "fs.open", "contents": "fs.open(${1:path}, ${2:flags}, ${3:[mode]}, function(${4:args}){\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.openSync", "contents": "fs.openSync(${1:path}, ${2:flags}, ${3:[mode]})${0}" },
    { "trigger": "fs.utimes", "contents": "fs.utimes(${1:path}, ${2:atime}, ${3:mtime}, function(${4:args}){\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.utimesSync", "contents": "fs.utimesSync(${1:path}, ${2:atime}, ${3:mtime})${0}" },
    { "trigger": "fs.futimes", "contents": "fs.futimes(${1:fd}, ${2:atime}, ${3:mtime}, function(${4:args}){\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.futimesSync", "contents": "fs.futimesSync(${1:fd}, ${2:atime}, ${3:mtime})${0}" },
    { "trigger": "fs.fsync", "contents": "fs.fsync(${1:fd}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.fsyncSync", "contents": "fs.fsyncSync(${1:fd})${0}" },
    { "trigger": "fs.write", "contents": "fs.write(${1:fd}, ${2:buffer}, ${3:offset}, ${4:length}, ${5:position}, function(${6:args}){\n\t${7:// body}\n})${0}" },
    { "trigger": "fs.writeSync", "contents": "fs.writeSync(${1:fd}, ${2:buffer}, ${3:offset}, ${4:length}, ${5:position})${0}" },
    { "trigger": "fs.read", "contents": "fs.read(${1:fd}, ${2:buffer}, ${3:offset}, ${4:length}, ${5:position}, function(${6:args}){\n\t${7:// body}\n})${0}" },
    { "trigger": "fs.readSync", "contents": "fs.readSync(${1:fd}, ${2:buffer}, ${3:offset}, ${4:length}, ${5:position})${0}" },
    { "trigger": "fs.readFile", "contents": "fs.readFile(${1:filename}, ${2:[options]}, function(${3:args}){\n\t${4:// body}\n})${0}" },
    { "trigger": "fs.readFileSync", "contents": "fs.readFileSync(${1:filename}, ${2:[options]})${0}" },
    { "trigger": "fs.writeFile", "contents": "fs.writeFile(${1:filename}, ${2:data}, ${3:[options]}, function(${4:args}){\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.writeFileSync", "contents": "fs.writeFileSync(${1:filename}, ${2:data}, ${3:[options]})${0}" },
    { "trigger": "fs.appendFile", "contents": "fs.appendFile(${1:filename}, ${2:data}, ${3:[options]}, function(${4:args}){\n\t${5:// body}\n})${0}" },
    { "trigger": "fs.appendFileSync", "contents": "fs.appendFileSync(${1:filename}, ${2:data}, ${3:[options]})${0}" },
    { "trigger": "fs.watchFile", "contents": "fs.watchFile(${1:filename}, ${2:[options]}, ${3:listener})${0}" },
    { "trigger": "fs.unwatchFile", "contents": "fs.unwatchFile(${1:filename}, ${2:[listener]})${0}" },
    { "trigger": "fs.watch", "contents": "fs.watch(${1:filename}, ${2:[options]}, ${3:[listener]})${0}" },
    { "trigger": "fs.exists", "contents": "fs.exists(${1:path}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "fs.existsSync", "contents": "fs.existsSync(${1:path})${0}" },
    { "trigger": "fs.createReadStream", "contents": "fs.createReadStream(${1:path}, ${2:[options]})${0}" },
    { "trigger": "fs.createWriteStream", "contents": "fs.createWriteStream(${1:path}, ${2:[options]})${0}" },
    { "trigger": "file.bytesWritten", "contents": "file.bytesWritten${0}" },
    { "trigger": "stats.isFile", "contents": "stats.isFile()${0}" },
    { "trigger": "stats.isDirectory", "contents": "stats.isDirectory()${0}" },
    { "trigger": "stats.isBlockDevice", "contents": "stats.isBlockDevice()${0}" },
    { "trigger": "stats.isCharacterDevice", "contents": "stats.isCharacterDevice()${0}" },
    { "trigger": "stats.isSymbolicLink", "contents": "stats.isSymbolicLink() (only valid with fs.lstat())${0}" },
    { "trigger": "stats.isFIFO", "contents": "stats.isFIFO()${0}" },
    { "trigger": "stats.isSocket", "contents": "stats.isSocket()${0}" },
    { "trigger": "watcher.close", "contents": "watcher.close()${0}" },
    { "trigger": "global", "contents": "global${0}" },
    { "trigger": "require", "contents": "require()${0}" },
    { "trigger": "require.resolve", "contents": "require.resolve()${0}" },
    { "trigger": "require.cache", "contents": "require.cache${0}" },
    { "trigger": "require.extensions", "contents": "require.extensions${0}" },
    { "trigger": "__filename", "contents": "__filename${0}" },
    { "trigger": "__dirname", "contents": "__dirname${0}" },
    { "trigger": "setTimeout", "contents": "setTimeout(${1:cb}, ${2:ms})${0}" },
    { "trigger": "clearTimeout", "contents": "clearTimeout(${1:t})${0}" },
    { "trigger": "setInterval", "contents": "setInterval(${1:cb}, ${2:ms})${0}" },
    { "trigger": "clearInterval", "contents": "clearInterval(${1:t})${0}" },
    { "trigger": "module.exports", "contents": "module.exports${0}" },
    { "trigger": "module.require", "contents": "module.require(${1:id})${0}" },
    { "trigger": "module.id", "contents": "module.id${0}" },
    { "trigger": "module.filename", "contents": "module.filename${0}" },
    { "trigger": "module.loaded", "contents": "module.loaded${0}" },
    { "trigger": "module.parent", "contents": "module.parent${0}" },
    { "trigger": "module.children", "contents": "module.children${0}" },
    { "trigger": "net.createServer", "contents": "net.createServer(${1:[options]}, ${2:[connectionListener]})${0}" },
    { "trigger": "net.connect", "contents": "net.connect(${1:options}, ${2:[connectionListener]})${0}" },
    { "trigger": "net.createConnection", "contents": "net.createConnection(${1:options}, ${2:[connectionListener]})${0}" },
    { "trigger": "net.connect", "contents": "net.connect(${1:port}, ${2:[host]}, ${3:[connectListener]})${0}" },
    { "trigger": "net.createConnection", "contents": "net.createConnection(${1:port}, ${2:[host]}, ${3:[connectListener]})${0}" },
    { "trigger": "net.connect", "contents": "net.connect(${1:path}, ${2:[connectListener]})${0}" },
    { "trigger": "net.createConnection", "contents": "net.createConnection(${1:path}, ${2:[connectListener]})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:port}, ${2:[host]}, ${3:[backlog]}, ${4:[callback]})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:path}, ${2:[callback]})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:handle}, ${2:[callback]})${0}" },
    { "trigger": "server.close", "contents": "server.close(${1:[callback]})${0}" },
    { "trigger": "server.address", "contents": "server.address()${0}" },
    { "trigger": "server.unref", "contents": "server.unref()${0}" },
    { "trigger": "server.ref", "contents": "server.ref()${0}" },
    { "trigger": "server.maxConnections", "contents": "server.maxConnections${0}" },
    { "trigger": "server.connections", "contents": "server.connections${0}" },
    { "trigger": "server.getConnections", "contents": "server.getConnections(function(${1:args}){\n\t${2:// body}\n})${0}" },
    { "trigger": "net.Socket", "contents": "net.Socket(${1:[options]})${0}" },
    { "trigger": "socket.connect", "contents": "socket.connect(${1:port}, ${2:[host]}, ${3:[connectListener]})${0}" },
    { "trigger": "socket.connect", "contents": "socket.connect(${1:path}, ${2:[connectListener]})${0}" },
    { "trigger": "socket.bufferSize", "contents": "socket.bufferSize${0}" },
    { "trigger": "socket.setEncoding", "contents": "socket.setEncoding(${1:[encoding]})${0}" },
    { "trigger": "socket.write", "contents": "socket.write(${1:data}, ${2:[encoding]}, ${3:[callback]})${0}" },
    { "trigger": "socket.end", "contents": "socket.end(${1:[data]}, ${2:[encoding]})${0}" },
    { "trigger": "socket.destroy", "contents": "socket.destroy()${0}" },
    { "trigger": "socket.pause", "contents": "socket.pause()${0}" },
    { "trigger": "socket.resume", "contents": "socket.resume()${0}" },
    { "trigger": "socket.setTimeout", "contents": "socket.setTimeout(${1:timeout}, ${2:[callback]})${0}" },
    { "trigger": "socket.setNoDelay", "contents": "socket.setNoDelay(${1:[noDelay]})${0}" },
    { "trigger": "socket.setKeepAlive", "contents": "socket.setKeepAlive(${1:[enable]}, ${2:[initialDelay]})${0}" },
    { "trigger": "socket.address", "contents": "socket.address()${0}" },
    { "trigger": "socket.unref", "contents": "socket.unref()${0}" },
    { "trigger": "socket.ref", "contents": "socket.ref()${0}" },
    { "trigger": "socket.remoteAddress", "contents": "socket.remoteAddress${0}" },
    { "trigger": "socket.remotePort", "contents": "socket.remotePort${0}" },
    { "trigger": "socket.localAddress", "contents": "socket.localAddress${0}" },
    { "trigger": "socket.localPort", "contents": "socket.localPort${0}" },
    { "trigger": "socket.bytesRead", "contents": "socket.bytesRead${0}" },
    { "trigger": "socket.bytesWritten", "contents": "socket.bytesWritten${0}" },
    { "trigger": "net.isIP", "contents": "net.isIP(${1:input})${0}" },
    { "trigger": "net.isIPv4", "contents": "net.isIPv4(${1:input})${0}" },
    { "trigger": "net.isIPv6", "contents": "net.isIPv6(${1:input})${0}" },
    { "trigger": "path.join", "contents": "path.join(${1:[path1]}, ${2:[path2]}, ${3:[...]})${0}" },
    { "trigger": "path.resolve", "contents": "path.resolve(${1:[from ...]}, ${2:to})${0}" },
    { "trigger": "path.relative", "contents": "path.relative(${1:from}, ${2:to})${0}" },
    { "trigger": "path.dirname", "contents": "path.dirname(${1:p})${0}" },
    { "trigger": "path.basename", "contents": "path.basename(${1:p}, ${2:[ext]})${0}" },
    { "trigger": "path.extname", "contents": "path.extname(${1:p})process.stdout${0}" },
    { "trigger": "punycode.decode", "contents": "punycode.decode(${1:string})${0}" },
    { "trigger": "punycode.encode", "contents": "punycode.encode(${1:string})${0}" },
    { "trigger": "punycode.toUnicode", "contents": "punycode.toUnicode(${1:domain})${0}" },
    { "trigger": "punycode.toASCII", "contents": "punycode.toASCII(${1:domain})${0}" },
    { "trigger": "punycode.ucs2", "contents": "punycode.ucs2${0}" },
    { "trigger": "punycode.ucs2.decode", "contents": "punycode.ucs2.decode(${1:string})${0}" },
    { "trigger": "punycode.ucs2.encode", "contents": "punycode.ucs2.encode(${1:codePoints})${0}" },
    { "trigger": "punycode.version", "contents": "punycode.version${0}" },
    { "trigger": "process.stderr", "contents": "process.stderr${0}" },
    { "trigger": "process.stdin", "contents": "process.stdin${0}" },
    { "trigger": "process.argv", "contents": "process.argv${0}" },
    { "trigger": "process.execPath", "contents": "process.execPath${0}" },
    { "trigger": "process.execArgv", "contents": "process.execArgv${0}" },
    { "trigger": "process.abort", "contents": "process.abort()${0}" },
    { "trigger": "process.chdir", "contents": "process.chdir(${1:directory})${0}" },
    { "trigger": "process.cwd", "contents": "process.cwd()${0}" },
    { "trigger": "process.env", "contents": "process.env${0}" },
    { "trigger": "process.exit", "contents": "process.exit(${1:[code]})${0}" },
    { "trigger": "process.getgid", "contents": "process.getgid()${0}" },
    { "trigger": "process.setgid", "contents": "process.setgid(${1:id})${0}" },
    { "trigger": "process.getuid", "contents": "process.getuid()${0}" },
    { "trigger": "process.setuid", "contents": "process.setuid(${1:id})${0}" },
    { "trigger": "process.getgroups", "contents": "process.getgroups()${0}" },
    { "trigger": "process.setgroups", "contents": "process.setgroups(${1:groups})${0}" },
    { "trigger": "process.initgroups", "contents": "process.initgroups(${1:user}, ${2:extra_group})${0}" },
    { "trigger": "process.version", "contents": "process.version${0}" },
    { "trigger": "process.versions", "contents": "process.versions${0}" },
    { "trigger": "process.config", "contents": "process.config${0}" },
    { "trigger": "process.kill", "contents": "process.kill(${1:pid}, ${2:[signal]})${0}" },
    { "trigger": "process.pid", "contents": "process.pid${0}" },
    { "trigger": "process.title", "contents": "process.title${0}" },
    { "trigger": "process.arch", "contents": "process.arch${0}" },
    { "trigger": "process.platform", "contents": "process.platform${0}" },
    { "trigger": "process.memoryUsage", "contents": "process.memoryUsage()${0}" },
    { "trigger": "process.nextTick", "contents": "process.nextTick(function(${1:args}){\n\t${2:// body}\n})${0}" },
    { "trigger": "process.maxTickDepth", "contents": "process.maxTickDepth${0}" },
    { "trigger": "process.umask", "contents": "process.umask(${1:[mask]})${0}" },
    { "trigger": "process.uptime", "contents": "process.uptime()${0}" },
    { "trigger": "process.hrtime", "contents": "process.hrtime()util.format(${1:format}, ${2:[...]})${0}" },
    { "trigger": "querystring.stringify", "contents": "querystring.stringify(${1:obj}, ${2:[sep]}, ${3:[eq]})${0}" },
    { "trigger": "querystring.parse", "contents": "querystring.parse(${1:str}, ${2:[sep]}, ${3:[eq]}, ${4:[options]})${0}" },
    { "trigger": "querystring.escape", "contents": "querystring.escape${0}" },
    { "trigger": "querystring.unescape", "contents": "querystring.unescape${0}" },
    { "trigger": "readline.createInterface", "contents": "readline.createInterface(${1:options})${0}" },
    { "trigger": "rl.setPrompt", "contents": "rl.setPrompt(${1:prompt}, ${2:length})${0}" },
    { "trigger": "rl.prompt", "contents": "rl.prompt(${1:[preserveCursor]})${0}" },
    { "trigger": "rl.question", "contents": "rl.question(${1:query}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "rl.pause", "contents": "rl.pause()${0}" },
    { "trigger": "rl.resume", "contents": "rl.resume()${0}" },
    { "trigger": "rl.close", "contents": "rl.close()${0}" },
    { "trigger": "rl.write", "contents": "rl.write(${1:data}, ${2:[key]})${0}" },
    { "trigger": "readline.cursorTo", "contents": "readline.cursorTo(${1:stream}, ${2:x}, ${3:y})${0}" },
    { "trigger": "readline.moveCursor", "contents": "readline.moveCursor(${1:stream}, ${2:dx}, ${3:dy})${0}" },
    { "trigger": "readline.clearLine", "contents": "readline.clearLine(${1:stream}, ${2:dir})${0}" },
    { "trigger": "readline.clearScreenDown", "contents": "readline.clearScreenDown(${1:stream})${0}" },
    { "trigger": "repl.start", "contents": "repl.start(${1:options})${0}" },
    { "trigger": "setTimeout", "contents": "setTimeout(function(${1:args}){\n\t${2:// body}\n}, ${2:delay}, ${3:[arg]}, ${4:[...]})${0}" },
    { "trigger": "clearTimeout", "contents": "clearTimeout(${1:timeoutObject})${0}" },
    { "trigger": "setInterval", "contents": "setInterval(function(${1:args}){\n\t${2:// body}\n}, ${2:delay}, ${3:[arg]}, ${4:[...]})${0}" },
    { "trigger": "clearInterval", "contents": "clearInterval(${1:intervalObject})${0}" },
    { "trigger": "unref", "contents": "unref()${0}" },
    { "trigger": "ref", "contents": "ref()${0}" },
    { "trigger": "setImmediate", "contents": "setImmediate(function(${1:args}){\n\t${2:// body}\n}, ${2:[arg]}, ${3:[...]})${0}" },
    { "trigger": "clearImmediate", "contents": "clearImmediate(${1:immediateObject})${0}" },
    { "trigger": "tls.getCiphers", "contents": "tls.getCiphers()${0}" },
    { "trigger": "tls.createServer", "contents": "tls.createServer(${1:options}, ${2:[secureConnectionListener]})${0}" },
    { "trigger": "tls.SLAB_BUFFER_SIZE", "contents": "tls.SLAB_BUFFER_SIZE${0}" },
    { "trigger": "tls.connect", "contents": "tls.connect(${1:options}, ${2:[callback]})${0}" },
    { "trigger": "tls.connect", "contents": "tls.connect(${1:port}, ${2:[host]}, ${3:[options]}, ${4:[callback]})${0}" },
    { "trigger": "tls.createSecurePair", "contents": "tls.createSecurePair(${1:[credentials]}, ${2:[isServer]}, ${3:[requestCert]}, ${4:[rejectUnauthorized]})${0}" },
    { "trigger": "server.listen", "contents": "server.listen(${1:port}, ${2:[host]}, ${3:[callback]})${0}" },
    { "trigger": "server.close", "contents": "server.close()${0}" },
    { "trigger": "server.address", "contents": "server.address()${0}" },
    { "trigger": "server.addContext", "contents": "server.addContext(${1:hostname}, ${2:credentials})${0}" },
    { "trigger": "server.maxConnections", "contents": "server.maxConnections${0}" },
    { "trigger": "server.connections", "contents": "server.connections${0}" },
    { "trigger": "cryptoStream.bytesWritten", "contents": "cryptoStream.bytesWritten${0}" },
    { "trigger": "cleartextStream.authorized", "contents": "cleartextStream.authorized${0}" },
    { "trigger": "cleartextStream.authorizationError", "contents": "cleartextStream.authorizationError${0}" },
    { "trigger": "cleartextStream.getPeerCertificate", "contents": "cleartextStream.getPeerCertificate()${0}" },
    { "trigger": "cleartextStream.getCipher", "contents": "cleartextStream.getCipher()${0}" },
    { "trigger": "cleartextStream.address", "contents": "cleartextStream.address()${0}" },
    { "trigger": "cleartextStream.remoteAddress", "contents": "cleartextStream.remoteAddress${0}" },
    { "trigger": "cleartextStream.remotePort", "contents": "cleartextStream.remotePort${0}" },
    { "trigger": "tty.isatty", "contents": "tty.isatty(${1:fd})${0}" },
    { "trigger": "tty.setRawMode", "contents": "tty.setRawMode(${1:mode})${0}" },
    { "trigger": "rs.isRaw", "contents": "rs.isRaw${0}" },
    { "trigger": "rs.setRawMode", "contents": "rs.setRawMode(${1:mode})${0}" },
    { "trigger": "ws.columns", "contents": "ws.columns${0}" },
    { "trigger": "ws.rows", "contents": "ws.rows${0}" },
    { "trigger": "dgram.createSocket", "contents": "dgram.createSocket(${1:type}, ${2:[callback]})${0}" },
    { "trigger": "socket.send", "contents": "socket.send(${1:buf}, ${2:offset}, ${3:length}, ${4:port}, ${5:address}, ${6:[callback]})${0}" },
    { "trigger": "socket.bind", "contents": "socket.bind(${1:port}, ${2:[address]}, ${3:[callback]})${0}" },
    { "trigger": "socket.close", "contents": "socket.close()${0}" },
    { "trigger": "socket.address", "contents": "socket.address()${0}" },
    { "trigger": "socket.setBroadcast", "contents": "socket.setBroadcast(${1:flag})${0}" },
    { "trigger": "socket.setTTL", "contents": "socket.setTTL(${1:ttl})${0}" },
    { "trigger": "socket.setMulticastTTL", "contents": "socket.setMulticastTTL(${1:ttl})${0}" },
    { "trigger": "socket.setMulticastLoopback", "contents": "socket.setMulticastLoopback(${1:flag})${0}" },
    { "trigger": "socket.addMembership", "contents": "socket.addMembership(${1:multicastAddress}, ${2:[multicastInterface]})${0}" },
    { "trigger": "socket.dropMembership", "contents": "socket.dropMembership(${1:multicastAddress}, ${2:[multicastInterface]})${0}" },
    { "trigger": "socket.unref", "contents": "socket.unref()${0}" },
    { "trigger": "socket.ref", "contents": "socket.ref()${0}" },
    { "trigger": "util.debug", "contents": "util.debug(${1:string})${0}" },
    { "trigger": "util.error", "contents": "util.error(${1:[...]})${0}" },
    { "trigger": "util.puts", "contents": "util.puts(${1:[...]})${0}" },
    { "trigger": "util.print", "contents": "util.print(${1:[...]})${0}" },
    { "trigger": "util.log", "contents": "util.log(${1:string})${0}" },
    { "trigger": "util.inspect", "contents": "util.inspect(${1:object}, ${2:[options]})${0}" },
    { "trigger": "util.isArray", "contents": "util.isArray(${1:object})${0}" },
    { "trigger": "util.isRegExp", "contents": "util.isRegExp(${1:object})${0}" },
    { "trigger": "util.isDate", "contents": "util.isDate(${1:object})${0}" },
    { "trigger": "util.isError", "contents": "util.isError(${1:object})${0}" },
    { "trigger": "util.pump", "contents": "util.pump(${1:readableStream}, ${2:writableStream}, ${3:[callback]})${0}" },
    { "trigger": "util.inherits", "contents": "util.inherits(${1:constructor}, ${2:superConstructor})url.parse(${1:urlStr}, ${2:[parseQueryString]}, ${3:[slashesDenoteHost]})${0}" },
    { "trigger": "url.format", "contents": "url.format(${1:urlObj})${0}" },
    { "trigger": "url.resolve", "contents": "url.resolve(${1:from}, ${2:to})os.tmpdir()${0}" },
    { "trigger": "os.endianness", "contents": "os.endianness()${0}" },
    { "trigger": "os.hostname", "contents": "os.hostname()${0}" },
    { "trigger": "os.type", "contents": "os.type()${0}" },
    { "trigger": "os.platform", "contents": "os.platform()${0}" },
    { "trigger": "os.arch", "contents": "os.arch()${0}" },
    { "trigger": "os.release", "contents": "os.release()${0}" },
    { "trigger": "os.uptime", "contents": "os.uptime()${0}" },
    { "trigger": "os.loadavg", "contents": "os.loadavg()${0}" },
    { "trigger": "os.totalmem", "contents": "os.totalmem()${0}" },
    { "trigger": "os.freemem", "contents": "os.freemem()${0}" },
    { "trigger": "os.cpus", "contents": "os.cpus()${0}" },
    { "trigger": "os.networkInterfaces", "contents": "os.networkInterfaces()${0}" },
    { "trigger": "os.EOLchild.stdin", "contents": "os.EOLchild.stdin${0}" },
    { "trigger": "vm.runInThisContext", "contents": "vm.runInThisContext(${1:code}, ${2:[filename]})${0}" },
    { "trigger": "vm.runInNewContext", "contents": "vm.runInNewContext(${1:code}, ${2:[sandbox]}, ${3:[filename]})${0}" },
    { "trigger": "vm.runInContext", "contents": "vm.runInContext(${1:code}, ${2:context}, ${3:[filename]})${0}" },
    { "trigger": "vm.createContext", "contents": "vm.createContext(${1:[initSandbox]})${0}" },
    { "trigger": "vm.createScript", "contents": "vm.createScript(${1:code}, ${2:[filename]})${0}" },
    { "trigger": "script.runInThisContext", "contents": "script.runInThisContext()${0}" },
    { "trigger": "script.runInNewContext", "contents": "script.runInNewContext(${1:[sandbox]})${0}" },
    { "trigger": "zlib.createGzip", "contents": "zlib.createGzip(${1:[options]})${0}" },
    { "trigger": "zlib.createGunzip", "contents": "zlib.createGunzip(${1:[options]})${0}" },
    { "trigger": "zlib.createDeflate", "contents": "zlib.createDeflate(${1:[options]})${0}" },
    { "trigger": "zlib.createInflate", "contents": "zlib.createInflate(${1:[options]})${0}" },
    { "trigger": "zlib.createDeflateRaw", "contents": "zlib.createDeflateRaw(${1:[options]})${0}" },
    { "trigger": "zlib.createInflateRaw", "contents": "zlib.createInflateRaw(${1:[options]})${0}" },
    { "trigger": "zlib.createUnzip", "contents": "zlib.createUnzip(${1:[options]})${0}" },
    { "trigger": "zlib.flush", "contents": "zlib.flush(function(${1:args}){\n\t${2:// body}\n})${0}" },
    { "trigger": "zlib.reset", "contents": "zlib.reset()${0}" },
    { "trigger": "zlib.deflate", "contents": "zlib.deflate(${1:buf}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "zlib.deflateRaw", "contents": "zlib.deflateRaw(${1:buf}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "zlib.gzip", "contents": "zlib.gzip(${1:buf}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "zlib.gunzip", "contents": "zlib.gunzip(${1:buf}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "zlib.inflate", "contents": "zlib.inflate(${1:buf}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "zlib.inflateRaw", "contents": "zlib.inflateRaw(${1:buf}, function(${2:args}){\n\t${3:// body}\n})${0}" },
    { "trigger": "zlib.unzip", "contents": "zlib.unzip(${1:buf}, function(${2:args}){\n\t${3:// body}\n})${0}" }
  ]
}
